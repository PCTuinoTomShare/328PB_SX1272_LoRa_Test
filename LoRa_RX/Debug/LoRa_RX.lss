
LoRa_RX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  000006c2  00000776  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006c2  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a7  00800136  00800136  000007ac  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  000007ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000007af  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007e0  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000168  00000000  00000000  00000820  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001430  00000000  00000000  00000988  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000003f2  00000000  00000000  00001db8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000cc3  00000000  00000000  000021aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000260  00000000  00000000  00002e70  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000004a7  00000000  00000000  000030d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000000c1  00000000  00000000  00003577  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000108  00000000  00000000  00003638  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__vector_18>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e2 ec       	ldi	r30, 0xC2	; 194
  c8:	f6 e0       	ldi	r31, 0x06	; 6
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a6 33       	cpi	r26, 0x36	; 54
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a6 e3       	ldi	r26, 0x36	; 54
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	ad 3d       	cpi	r26, 0xDD	; 221
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 17 02 	call	0x42e	; 0x42e <main>
  ea:	0c 94 5f 03 	jmp	0x6be	; 0x6be <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <IO_Init>:
}

// Data LED off.
void IO_Data_LED_Off( void )
{
	PORTD &= 0xdf;	
  f2:	8c e0       	ldi	r24, 0x0C	; 12
  f4:	8d b9       	out	0x0d, r24	; 13
  f6:	86 e0       	ldi	r24, 0x06	; 6
  f8:	87 b9       	out	0x07, r24	; 7
  fa:	80 ee       	ldi	r24, 0xE0	; 224
  fc:	8a b9       	out	0x0a, r24	; 10
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	84 b9       	out	0x04, r24	; 4
 102:	72 9a       	sbi	0x0e, 2	; 14
 104:	42 9a       	sbi	0x08, 2	; 8
 106:	28 98       	cbi	0x05, 0	; 5
 108:	5f 9a       	sbi	0x0b, 7	; 11
 10a:	8b b1       	in	r24, 0x0b	; 11
 10c:	8f 79       	andi	r24, 0x9F	; 159
 10e:	8b b9       	out	0x0b, r24	; 11
 110:	08 95       	ret

00000112 <IO_Data_LED_Toggle>:
}

// Data LED toggle.
void IO_Data_LED_Toggle( void )
{
	temp1 = PORTD;
 112:	8b b1       	in	r24, 0x0b	; 11
	temp1 &= 0x20;	
 114:	80 72       	andi	r24, 0x20	; 32
 116:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <temp1>
	if( temp1 ){
 11a:	88 23       	and	r24, r24
 11c:	11 f0       	breq	.+4      	; 0x122 <IO_Data_LED_Toggle+0x10>
		PORTD &= 0xdf;
 11e:	5d 98       	cbi	0x0b, 5	; 11
		return;		
 120:	08 95       	ret
	}
	PORTD |= 0x20;	
 122:	5d 9a       	sbi	0x0b, 5	; 11
 124:	08 95       	ret

00000126 <SX1272_RX_Switch_On>:
				return;				
			}
			// Next task.
			++lora_tx_task_cnt;
			// Clear status flag bit.
			lora_task_flag &= 0xfe;					
 126:	28 98       	cbi	0x05, 0	; 5
 128:	5f 9a       	sbi	0x0b, 7	; 11
 12a:	08 95       	ret

0000012c <SX1272_Reset_Off>:
 12c:	42 98       	cbi	0x08, 2	; 8
 12e:	3a 98       	cbi	0x07, 2	; 7
 130:	08 95       	ret

00000132 <SX1272_Reg_Access_On>:
 132:	89 e5       	ldi	r24, 0x59	; 89
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	90 93 c6 01 	sts	0x01C6, r25	; 0x8001c6 <spi_trn_ptr+0x1>
 13a:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <spi_trn_ptr>
 13e:	85 ea       	ldi	r24, 0xA5	; 165
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	90 93 db 01 	sts	0x01DB, r25	; 0x8001db <spi_rec_ptr+0x1>
 146:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <spi_rec_ptr>
 14a:	82 e0       	ldi	r24, 0x02	; 2
 14c:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <spi_data_cnt>
 150:	0e 94 b6 02 	call	0x56c	; 0x56c <SPI_Trigger_On>
 154:	08 95       	ret

00000156 <LoRa_Rx_Task_Poll>:
// LoRa RX task.
void LoRa_Rx_Task_Poll( void )
{
	// Status flag check.
	// - RX turn on flag bit.
	temp2 = lora_task_flag;
 156:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <lora_task_flag>
	temp2 &= 0x02;
 15a:	89 2f       	mov	r24, r25
 15c:	82 70       	andi	r24, 0x02	; 2
 15e:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <temp2>
	if( temp2 == 0 ){
 162:	88 23       	and	r24, r24
 164:	09 f4       	brne	.+2      	; 0x168 <LoRa_Rx_Task_Poll+0x12>
 166:	9b c0       	rjmp	.+310    	; 0x29e <LoRa_Rx_Task_Poll+0x148>
		return;
	}
	
	// SPI busy check.
	temp2 = spi_status_flag;
	temp2 &= 0x01;
 168:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <spi_status_flag>
 16c:	81 70       	andi	r24, 0x01	; 1
 16e:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <temp2>
	if( temp2 ){
 172:	81 11       	cpse	r24, r1
 174:	94 c0       	rjmp	.+296    	; 0x29e <LoRa_Rx_Task_Poll+0x148>
		return;
	}
	// Task dispatch.
	switch( lora_rx_task_cnt ){
 176:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <lora_rx_task_cnt>
 17a:	82 30       	cpi	r24, 0x02	; 2
 17c:	09 f4       	brne	.+2      	; 0x180 <LoRa_Rx_Task_Poll+0x2a>
 17e:	45 c0       	rjmp	.+138    	; 0x20a <LoRa_Rx_Task_Poll+0xb4>
 180:	28 f4       	brcc	.+10     	; 0x18c <LoRa_Rx_Task_Poll+0x36>
 182:	88 23       	and	r24, r24
 184:	61 f0       	breq	.+24     	; 0x19e <LoRa_Rx_Task_Poll+0x48>
 186:	81 30       	cpi	r24, 0x01	; 1
 188:	c9 f0       	breq	.+50     	; 0x1bc <LoRa_Rx_Task_Poll+0x66>
 18a:	08 95       	ret
 18c:	84 30       	cpi	r24, 0x04	; 4
 18e:	09 f4       	brne	.+2      	; 0x192 <LoRa_Rx_Task_Poll+0x3c>
 190:	61 c0       	rjmp	.+194    	; 0x254 <LoRa_Rx_Task_Poll+0xfe>
 192:	08 f4       	brcc	.+2      	; 0x196 <LoRa_Rx_Task_Poll+0x40>
 194:	49 c0       	rjmp	.+146    	; 0x228 <LoRa_Rx_Task_Poll+0xd2>
 196:	85 30       	cpi	r24, 0x05	; 5
 198:	09 f4       	brne	.+2      	; 0x19c <LoRa_Rx_Task_Poll+0x46>
 19a:	64 c0       	rjmp	.+200    	; 0x264 <LoRa_Rx_Task_Poll+0x10e>
 19c:	08 95       	ret
		
		case 0:
			// Data LED toggle.
			IO_Data_LED_Toggle();		
 19e:	0e 94 89 00 	call	0x112	; 0x112 <IO_Data_LED_Toggle>
			// Switch RX on.
			SX1272_RX_Switch_On();
 1a2:	0e 94 93 00 	call	0x126	; 0x126 <SX1272_RX_Switch_On>
			// Parameter setting count.
			lora_para_cnt = 10;
 1a6:	8a e0       	ldi	r24, 0x0A	; 10
 1a8:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <lora_para_cnt>
			// Clear index.
			lora_para_index = 0;
 1ac:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <lora_para_index>
			// Next task;
			++lora_rx_task_cnt;
 1b0:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <lora_rx_task_cnt>
 1b4:	8f 5f       	subi	r24, 0xFF	; 255
 1b6:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <lora_rx_task_cnt>
			break;
 1ba:	08 95       	ret
		
		case 1:
			// Output RW + register address.
			spi_trn_data[0] = RX_Task_Setting[ lora_para_index ];
 1bc:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <lora_para_index>
 1c0:	a9 e5       	ldi	r26, 0x59	; 89
 1c2:	b1 e0       	ldi	r27, 0x01	; 1
 1c4:	e8 2f       	mov	r30, r24
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	e0 50       	subi	r30, 0x00	; 0
 1ca:	ff 4f       	sbci	r31, 0xFF	; 255
 1cc:	90 81       	ld	r25, Z
 1ce:	9c 93       	st	X, r25
			// For next data.
			++lora_para_index;
			--lora_para_cnt;
 1d0:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <lora_para_cnt>
		
		case 1:
			// Output RW + register address.
			spi_trn_data[0] = RX_Task_Setting[ lora_para_index ];
			// For next data.
			++lora_para_index;
 1d4:	e1 e0       	ldi	r30, 0x01	; 1
 1d6:	e8 0f       	add	r30, r24
			--lora_para_cnt;
			// Write register.
			spi_trn_data[1] = RX_Task_Setting[ lora_para_index ];
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	e0 50       	subi	r30, 0x00	; 0
 1dc:	ff 4f       	sbci	r31, 0xFF	; 255
 1de:	20 81       	ld	r18, Z
 1e0:	11 96       	adiw	r26, 0x01	; 1
 1e2:	2c 93       	st	X, r18
			// For next data.
			++lora_para_index;
 1e4:	8e 5f       	subi	r24, 0xFE	; 254
 1e6:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <lora_para_index>
			--lora_para_cnt;
 1ea:	8e ef       	ldi	r24, 0xFE	; 254
 1ec:	89 0f       	add	r24, r25
 1ee:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <lora_para_cnt>
			// Task trigger on.
			SX1272_Reg_Access_On();
 1f2:	0e 94 99 00 	call	0x132	; 0x132 <SX1272_Reg_Access_On>
			// Need more data to write.
			if( lora_para_cnt ){
 1f6:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <lora_para_cnt>
 1fa:	81 11       	cpse	r24, r1
 1fc:	50 c0       	rjmp	.+160    	; 0x29e <LoRa_Rx_Task_Poll+0x148>
				return;
			}
			// Next task.
			++lora_rx_task_cnt;
 1fe:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <lora_rx_task_cnt>
 202:	8f 5f       	subi	r24, 0xFF	; 255
 204:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <lora_rx_task_cnt>
			break;
 208:	08 95       	ret
		
		case 2:
			// IRQ flag read.
			spi_trn_data[0] = 0x12;		// read address 0x12
 20a:	e9 e5       	ldi	r30, 0x59	; 89
 20c:	f1 e0       	ldi	r31, 0x01	; 1
 20e:	82 e1       	ldi	r24, 0x12	; 18
 210:	80 83       	st	Z, r24
			spi_trn_data[1] = 0x00;		// dump out for SPI read.
 212:	11 82       	std	Z+1, r1	; 0x01
			spi_rec_data[1] = 0;
 214:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <spi_rec_data+0x1>
			// Task trigger on.
			SX1272_Reg_Access_On();
 218:	0e 94 99 00 	call	0x132	; 0x132 <SX1272_Reg_Access_On>
			// Next task.
			++lora_rx_task_cnt;
 21c:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <lora_rx_task_cnt>
 220:	8f 5f       	subi	r24, 0xFF	; 255
 222:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <lora_rx_task_cnt>
			break;
 226:	08 95       	ret
		
		case 3:
			// Check flag bit.
			spi_rec_data[1] &= 0x40;		// Bit #6 = 1, RX done.
 228:	e5 ea       	ldi	r30, 0xA5	; 165
 22a:	f1 e0       	ldi	r31, 0x01	; 1
 22c:	81 81       	ldd	r24, Z+1	; 0x01
 22e:	80 74       	andi	r24, 0x40	; 64
 230:	81 83       	std	Z+1, r24	; 0x01
			if( spi_rec_data[1] == 0 ){
 232:	81 11       	cpse	r24, r1
 234:	04 c0       	rjmp	.+8      	; 0x23e <LoRa_Rx_Task_Poll+0xe8>
				// Not done.
				// Previous task.
				--lora_rx_task_cnt;
 236:	82 e0       	ldi	r24, 0x02	; 2
 238:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <lora_rx_task_cnt>
				return;
 23c:	08 95       	ret
			}
			// Data read for FIFO count.
			lora_para_cnt = 10;
 23e:	8a e0       	ldi	r24, 0x0A	; 10
 240:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <lora_para_cnt>
			// Clear index.
			lora_para_index = 0;
 244:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <lora_para_index>
			// Read FIFO register address.
			spi_trn_data[0] = 0x00;
 248:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <spi_trn_data>
			// Next task.
			++lora_rx_task_cnt;
 24c:	84 e0       	ldi	r24, 0x04	; 4
 24e:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <lora_rx_task_cnt>
			break;
 252:	08 95       	ret

		case 4:		
			// Task trigger on.
			SX1272_Reg_Access_On();
 254:	0e 94 99 00 	call	0x132	; 0x132 <SX1272_Reg_Access_On>
			// Next task.
			++lora_rx_task_cnt;		
 258:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <lora_rx_task_cnt>
 25c:	8f 5f       	subi	r24, 0xFF	; 255
 25e:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <lora_rx_task_cnt>
			break;
 262:	08 95       	ret
		
		case 5:
			// Hold FIFO data.
			rf_rx_data[ lora_para_index ] = spi_rec_data[1];
 264:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <lora_para_index>
 268:	e8 2f       	mov	r30, r24
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	e6 5b       	subi	r30, 0xB6	; 182
 26e:	fe 4f       	sbci	r31, 0xFE	; 254
 270:	20 91 a6 01 	lds	r18, 0x01A6	; 0x8001a6 <spi_rec_data+0x1>
 274:	20 83       	st	Z, r18
			++lora_para_index;
 276:	8f 5f       	subi	r24, 0xFF	; 255
 278:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <lora_para_index>
			--lora_para_cnt;
 27c:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <lora_para_cnt>
 280:	81 50       	subi	r24, 0x01	; 1
 282:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <lora_para_cnt>
			// More data need receive.
			if( lora_para_cnt ){
 286:	88 23       	and	r24, r24
 288:	21 f0       	breq	.+8      	; 0x292 <LoRa_Rx_Task_Poll+0x13c>
				// Previous task.
				--lora_rx_task_cnt;
 28a:	84 e0       	ldi	r24, 0x04	; 4
 28c:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <lora_rx_task_cnt>
				return;
 290:	08 95       	ret
			}
			// Next task.
			++lora_rx_task_cnt;
 292:	86 e0       	ldi	r24, 0x06	; 6
 294:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <lora_rx_task_cnt>
			// Clear status flag bit.
			lora_task_flag &= 0xfd;		
 298:	9d 7f       	andi	r25, 0xFD	; 253
 29a:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <lora_task_flag>
 29e:	08 95       	ret

000002a0 <SX1272_SPI_Loop>:

// SPI transmit loop.
void SX1272_SPI_Loop( void )
{
	// Task loop.
	temp2 = 0x01;
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <temp2>
	while( temp2 ){
		SPI_Task();
 2a6:	0e 94 7e 02 	call	0x4fc	; 0x4fc <SPI_Task>
		temp2 = spi_status_flag;
		temp2 &= 0x01;
 2aa:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <spi_status_flag>
 2ae:	81 70       	andi	r24, 0x01	; 1
 2b0:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <temp2>
// SPI transmit loop.
void SX1272_SPI_Loop( void )
{
	// Task loop.
	temp2 = 0x01;
	while( temp2 ){
 2b4:	81 11       	cpse	r24, r1
 2b6:	f7 cf       	rjmp	.-18     	; 0x2a6 <SX1272_SPI_Loop+0x6>
		SPI_Task();
		temp2 = spi_status_flag;
		temp2 &= 0x01;
	}	
}
 2b8:	08 95       	ret

000002ba <SX1272_Reg_Access>:
}

// Single register access.
void SX1272_Reg_Access( void )
{
	spi_trn_ptr = spi_trn_data;		// Output data pointer.
 2ba:	89 e5       	ldi	r24, 0x59	; 89
 2bc:	91 e0       	ldi	r25, 0x01	; 1
 2be:	90 93 c6 01 	sts	0x01C6, r25	; 0x8001c6 <spi_trn_ptr+0x1>
 2c2:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <spi_trn_ptr>
	spi_rec_ptr = spi_rec_data;     // Received data pointer.
 2c6:	85 ea       	ldi	r24, 0xA5	; 165
 2c8:	91 e0       	ldi	r25, 0x01	; 1
 2ca:	90 93 db 01 	sts	0x01DB, r25	; 0x8001db <spi_rec_ptr+0x1>
 2ce:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <spi_rec_ptr>
	spi_data_cnt = 2;				// 2 byte data.
 2d2:	82 e0       	ldi	r24, 0x02	; 2
 2d4:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <spi_data_cnt>
	SPI_Trigger_On();				// SPI on.
 2d8:	0e 94 b6 02 	call	0x56c	; 0x56c <SPI_Trigger_On>
	SX1272_SPI_Loop();				// SPI loop.
 2dc:	0e 94 50 01 	call	0x2a0	; 0x2a0 <SX1272_SPI_Loop>
 2e0:	08 95       	ret

000002e2 <LoRa_RF_Init>:
	0x81, 0x85  // RX on.
};

// LoRa RF initialize.
void LoRa_RF_Init( void )
{
 2e2:	cf 93       	push	r28
 2e4:	df 93       	push	r29
 2e6:	80 e0       	ldi	r24, 0x00	; 0
	temp3 = 0;
	// Set initialize register write data.
	while( temp3 < 38 ){			
		spi_trn_data[0] = RF_Init_Data[ temp3 ];
 2e8:	c9 e5       	ldi	r28, 0x59	; 89
 2ea:	d1 e0       	ldi	r29, 0x01	; 1
 2ec:	e8 2f       	mov	r30, r24
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	e6 5f       	subi	r30, 0xF6	; 246
 2f2:	fe 4f       	sbci	r31, 0xFE	; 254
 2f4:	90 81       	ld	r25, Z
 2f6:	98 83       	st	Y, r25
		++temp3;
 2f8:	e1 e0       	ldi	r30, 0x01	; 1
 2fa:	e8 0f       	add	r30, r24
		spi_trn_data[1] = RF_Init_Data[ temp3 ];
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	e6 5f       	subi	r30, 0xF6	; 246
 300:	fe 4f       	sbci	r31, 0xFE	; 254
 302:	90 81       	ld	r25, Z
 304:	99 83       	std	Y+1, r25	; 0x01
		++temp3;
 306:	8e 5f       	subi	r24, 0xFE	; 254
 308:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <temp3>
		SX1272_Reg_Access();					
 30c:	0e 94 5d 01 	call	0x2ba	; 0x2ba <SX1272_Reg_Access>
// LoRa RF initialize.
void LoRa_RF_Init( void )
{
	temp3 = 0;
	// Set initialize register write data.
	while( temp3 < 38 ){			
 310:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <temp3>
 314:	86 32       	cpi	r24, 0x26	; 38
 316:	50 f3       	brcs	.-44     	; 0x2ec <LoRa_RF_Init+0xa>
		++temp3;
		spi_trn_data[1] = RF_Init_Data[ temp3 ];
		++temp3;
		SX1272_Reg_Access();					
	}
}
 318:	df 91       	pop	r29
 31a:	cf 91       	pop	r28
 31c:	08 95       	ret

0000031e <get_HT_for_Show>:

// Get humidity & temperature data for show.
void get_HT_for_Show()
{
	// CRC check.
	temp1 = rf_rx_data[0];
 31e:	ea e4       	ldi	r30, 0x4A	; 74
 320:	f1 e0       	ldi	r31, 0x01	; 1
 322:	20 81       	ld	r18, Z
	temp1 += rf_rx_data[1];
 324:	81 81       	ldd	r24, Z+1	; 0x01
	temp1 += rf_rx_data[2];
 326:	92 81       	ldd	r25, Z+2	; 0x02
// Get humidity & temperature data for show.
void get_HT_for_Show()
{
	// CRC check.
	temp1 = rf_rx_data[0];
	temp1 += rf_rx_data[1];
 328:	38 2f       	mov	r19, r24
 32a:	32 0f       	add	r19, r18
	temp1 += rf_rx_data[2];
 32c:	39 0f       	add	r19, r25
	temp1 -= rf_rx_data[9];
 32e:	41 85       	ldd	r20, Z+9	; 0x09
 330:	34 1b       	sub	r19, r20
 332:	30 93 a1 01 	sts	0x01A1, r19	; 0x8001a1 <temp1>
	if( temp1 ){
 336:	31 11       	cpse	r19, r1
 338:	79 c0       	rjmp	.+242    	; 0x42c <__FUSE_REGION_LENGTH__+0x2c>
	// Humidity, HIH6130 humidity measurement and
	// converted data.		
	temp1 = rf_rx_data[0];
	temp1 /= 100;
	show_data[0] = (uint8_t)temp1;
	show_data[0] += 0x30;	
 33a:	e6 e3       	ldi	r30, 0x36	; 54
 33c:	f1 e0       	ldi	r31, 0x01	; 1
		return;
	}			
	// Humidity, HIH6130 humidity measurement and
	// converted data.		
	temp1 = rf_rx_data[0];
	temp1 /= 100;
 33e:	39 e2       	ldi	r19, 0x29	; 41
 340:	23 9f       	mul	r18, r19
 342:	31 2d       	mov	r19, r1
 344:	11 24       	eor	r1, r1
 346:	32 95       	swap	r19
 348:	3f 70       	andi	r19, 0x0F	; 15
	show_data[0] = (uint8_t)temp1;
	show_data[0] += 0x30;	
 34a:	40 e3       	ldi	r20, 0x30	; 48
 34c:	43 0f       	add	r20, r19
 34e:	40 83       	st	Z, r20
	rf_rx_data[0] %= 100;	
 350:	44 e6       	ldi	r20, 0x64	; 100
 352:	34 9f       	mul	r19, r20
 354:	20 19       	sub	r18, r0
 356:	11 24       	eor	r1, r1
	temp1 = rf_rx_data[0];
	temp1 /= 10;
 358:	3d ec       	ldi	r19, 0xCD	; 205
 35a:	23 9f       	mul	r18, r19
 35c:	31 2d       	mov	r19, r1
 35e:	11 24       	eor	r1, r1
 360:	36 95       	lsr	r19
 362:	36 95       	lsr	r19
 364:	36 95       	lsr	r19
	show_data[1] = (uint8_t)temp1;
	show_data[1] += 0x30;		
 366:	40 e3       	ldi	r20, 0x30	; 48
 368:	43 0f       	add	r20, r19
 36a:	41 83       	std	Z+1, r20	; 0x01
	rf_rx_data[0] %= 10;	
 36c:	33 0f       	add	r19, r19
 36e:	43 2f       	mov	r20, r19
 370:	44 0f       	add	r20, r20
 372:	44 0f       	add	r20, r20
 374:	34 0f       	add	r19, r20
 376:	23 1b       	sub	r18, r19
 378:	20 93 4a 01 	sts	0x014A, r18	; 0x80014a <rf_rx_data>
	show_data[2] = (uint8_t)rf_rx_data[0];
	show_data[2] += 0x30;		
 37c:	20 5d       	subi	r18, 0xD0	; 208
 37e:	22 83       	std	Z+2, r18	; 0x02
	// Temperature, HIH6130 temperature and		
	// converted data.
	// - sign.
	show_data[5] = ' ';
 380:	20 e2       	ldi	r18, 0x20	; 32
 382:	25 83       	std	Z+5, r18	; 0x05
	temp2 = rf_rx_data[1];
	temp2 &= 0x80;
 384:	28 2f       	mov	r18, r24
 386:	20 78       	andi	r18, 0x80	; 128
 388:	20 93 49 01 	sts	0x0149, r18	; 0x800149 <temp2>
	if( temp2 ){
 38c:	22 23       	and	r18, r18
 38e:	19 f0       	breq	.+6      	; 0x396 <get_HT_for_Show+0x78>
		show_data[5] = '-';
 390:	2d e2       	ldi	r18, 0x2D	; 45
 392:	20 93 3b 01 	sts	0x013B, r18	; 0x80013b <__data_end+0x5>
	}
	// value.	
	temp1 = rf_rx_data[1];
	temp1 /= 100;
	show_data[6] = (uint8_t)temp1;
	show_data[6] += 0x30;
 396:	e6 e3       	ldi	r30, 0x36	; 54
 398:	f1 e0       	ldi	r31, 0x01	; 1
	if( temp2 ){
		show_data[5] = '-';
	}
	// value.	
	temp1 = rf_rx_data[1];
	temp1 /= 100;
 39a:	39 e2       	ldi	r19, 0x29	; 41
 39c:	83 9f       	mul	r24, r19
 39e:	21 2d       	mov	r18, r1
 3a0:	11 24       	eor	r1, r1
 3a2:	22 95       	swap	r18
 3a4:	2f 70       	andi	r18, 0x0F	; 15
	show_data[6] = (uint8_t)temp1;
	show_data[6] += 0x30;
 3a6:	40 e3       	ldi	r20, 0x30	; 48
 3a8:	42 0f       	add	r20, r18
 3aa:	46 83       	std	Z+6, r20	; 0x06
	rf_rx_data[1] %= 100;
 3ac:	64 e6       	ldi	r22, 0x64	; 100
 3ae:	26 9f       	mul	r18, r22
 3b0:	80 19       	sub	r24, r0
 3b2:	11 24       	eor	r1, r1
	temp1 = rf_rx_data[1];
	temp1 /= 10;
 3b4:	2d ec       	ldi	r18, 0xCD	; 205
 3b6:	82 9f       	mul	r24, r18
 3b8:	41 2d       	mov	r20, r1
 3ba:	11 24       	eor	r1, r1
 3bc:	46 95       	lsr	r20
 3be:	46 95       	lsr	r20
 3c0:	46 95       	lsr	r20
	show_data[7] = (uint8_t)temp1;
	show_data[7] += 0x30;
 3c2:	50 e3       	ldi	r21, 0x30	; 48
 3c4:	54 0f       	add	r21, r20
 3c6:	57 83       	std	Z+7, r21	; 0x07
	rf_rx_data[1] %= 10;
 3c8:	44 0f       	add	r20, r20
 3ca:	54 2f       	mov	r21, r20
 3cc:	55 0f       	add	r21, r21
 3ce:	55 0f       	add	r21, r21
 3d0:	45 0f       	add	r20, r21
 3d2:	84 1b       	sub	r24, r20
 3d4:	aa e4       	ldi	r26, 0x4A	; 74
 3d6:	b1 e0       	ldi	r27, 0x01	; 1
 3d8:	11 96       	adiw	r26, 0x01	; 1
 3da:	8c 93       	st	X, r24
 3dc:	11 97       	sbiw	r26, 0x01	; 1
	show_data[8] = (uint8_t)rf_rx_data[1];
	show_data[8] += 0x30;
 3de:	80 5d       	subi	r24, 0xD0	; 208
 3e0:	80 87       	std	Z+8, r24	; 0x08
	// UV sensor value.
	// value.
	temp1 = rf_rx_data[2];
	temp1 /= 100;
 3e2:	93 9f       	mul	r25, r19
 3e4:	81 2d       	mov	r24, r1
 3e6:	11 24       	eor	r1, r1
 3e8:	82 95       	swap	r24
 3ea:	8f 70       	andi	r24, 0x0F	; 15
	show_data[13] = (uint8_t)temp1;
	show_data[13] += 0x30;
 3ec:	30 e3       	ldi	r19, 0x30	; 48
 3ee:	38 0f       	add	r19, r24
 3f0:	35 87       	std	Z+13, r19	; 0x0d
	rf_rx_data[2] %= 100;
 3f2:	86 9f       	mul	r24, r22
 3f4:	90 19       	sub	r25, r0
 3f6:	11 24       	eor	r1, r1
	temp1 = rf_rx_data[2];
	temp1 /= 10;
 3f8:	92 9f       	mul	r25, r18
 3fa:	81 2d       	mov	r24, r1
 3fc:	11 24       	eor	r1, r1
 3fe:	86 95       	lsr	r24
 400:	86 95       	lsr	r24
 402:	86 95       	lsr	r24
 404:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <temp1>
	show_data[14] = (uint8_t)temp1;
	show_data[14] += 0x30;
 408:	20 e3       	ldi	r18, 0x30	; 48
 40a:	28 0f       	add	r18, r24
 40c:	26 87       	std	Z+14, r18	; 0x0e
	rf_rx_data[2] %= 10;
 40e:	88 0f       	add	r24, r24
 410:	28 2f       	mov	r18, r24
 412:	22 0f       	add	r18, r18
 414:	22 0f       	add	r18, r18
 416:	82 0f       	add	r24, r18
 418:	98 1b       	sub	r25, r24
 41a:	12 96       	adiw	r26, 0x02	; 2
 41c:	9c 93       	st	X, r25
	show_data[15] = (uint8_t)rf_rx_data[2];
	show_data[15] += 0x30;	
 41e:	90 5d       	subi	r25, 0xD0	; 208
 420:	97 87       	std	Z+15, r25	; 0x0f
	// Set flag bit, update show data.
	lora_task_flag |= 0x08;
 422:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <lora_task_flag>
 426:	88 60       	ori	r24, 0x08	; 8
 428:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <lora_task_flag>
 42c:	08 95       	ret

0000042e <main>:
void get_HT_for_Show();

int main(void)
{
	// System clock prescaler 1.
	CLKPR = 0x80;  // Enable.
 42e:	e1 e6       	ldi	r30, 0x61	; 97
 430:	f0 e0       	ldi	r31, 0x00	; 0
 432:	80 e8       	ldi	r24, 0x80	; 128
 434:	80 83       	st	Z, r24
	CLKPR = 0x00;  // Write value.
 436:	10 82       	st	Z, r1
	
	// IO initialize.
	IO_Init();
 438:	0e 94 79 00 	call	0xf2	; 0xf2 <IO_Init>
	// SPI initialize.
	SPI_Init();
 43c:	0e 94 72 02 	call	0x4e4	; 0x4e4 <SPI_Init>
	// UART #0 initialize.
	UART0_Init();
 440:	0e 94 1e 03 	call	0x63c	; 0x63c <UART0_Init>
	// Timer #0 initialize.
	Timer0_Init();
 444:	0e 94 d6 02 	call	0x5ac	; 0x5ac <Timer0_Init>
	// Enable global interrupt.
	sei();
 448:	78 94       	sei
	
	// Power on delay for SX1272.
	delay_cnt = 3;
 44a:	83 e0       	ldi	r24, 0x03	; 3
 44c:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <delay_cnt>
	while( delay_cnt ){
		Timer0_Task();
 450:	0e 94 dd 02 	call	0x5ba	; 0x5ba <Timer0_Task>
	// Enable global interrupt.
	sei();
	
	// Power on delay for SX1272.
	delay_cnt = 3;
	while( delay_cnt ){
 454:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <delay_cnt>
 458:	81 11       	cpse	r24, r1
 45a:	fa cf       	rjmp	.-12     	; 0x450 <main+0x22>
		Timer0_Task();
	}

	// SX1272 reset off.
	SX1272_Reset_Off();
 45c:	0e 94 96 00 	call	0x12c	; 0x12c <SX1272_Reset_Off>

	// Reset delay for SX1272.
	delay_cnt = 3;
 460:	83 e0       	ldi	r24, 0x03	; 3
 462:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <delay_cnt>
	while( delay_cnt ){
		Timer0_Task();
 466:	0e 94 dd 02 	call	0x5ba	; 0x5ba <Timer0_Task>
	// SX1272 reset off.
	SX1272_Reset_Off();

	// Reset delay for SX1272.
	delay_cnt = 3;
	while( delay_cnt ){
 46a:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <delay_cnt>
 46e:	81 11       	cpse	r24, r1
 470:	fa cf       	rjmp	.-12     	; 0x466 <main+0x38>
		Timer0_Task();
	}
		
	// SX1272 RF initialize.
	LoRa_RF_Init();
 472:	0e 94 71 01 	call	0x2e2	; 0x2e2 <LoRa_RF_Init>

	// Initial delay for SX1272.
	delay_cnt = 5;
 476:	85 e0       	ldi	r24, 0x05	; 5
 478:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <delay_cnt>
	while( delay_cnt ){
		Timer0_Task();
 47c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <Timer0_Task>
	// SX1272 RF initialize.
	LoRa_RF_Init();

	// Initial delay for SX1272.
	delay_cnt = 5;
	while( delay_cnt ){
 480:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <delay_cnt>
 484:	81 11       	cpse	r24, r1
 486:	fa cf       	rjmp	.-12     	; 0x47c <main+0x4e>
		Timer0_Task();
	}
			
	// Reset variable.
	// Set flag bit, start LoRa RX task.
	lora_rx_task_cnt = 0;
 488:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <lora_rx_task_cnt>
	lora_task_flag = 0x02;
 48c:	82 e0       	ldi	r24, 0x02	; 2
 48e:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <lora_task_flag>
	// Show data.
	show_data[3] = '%';
 492:	e6 e3       	ldi	r30, 0x36	; 54
 494:	f1 e0       	ldi	r31, 0x01	; 1
 496:	85 e2       	ldi	r24, 0x25	; 37
 498:	83 83       	std	Z+3, r24	; 0x03
	show_data[4] = ' ';	
 49a:	80 e2       	ldi	r24, 0x20	; 32
 49c:	84 83       	std	Z+4, r24	; 0x04
	show_data[9] = ' ';
 49e:	81 87       	std	Z+9, r24	; 0x09
	show_data[10] = 'U';
 4a0:	85 e5       	ldi	r24, 0x55	; 85
 4a2:	82 87       	std	Z+10, r24	; 0x0a
	show_data[11] = 'V';
 4a4:	86 e5       	ldi	r24, 0x56	; 86
 4a6:	83 87       	std	Z+11, r24	; 0x0b
	show_data[12] = ':';
 4a8:	8a e3       	ldi	r24, 0x3A	; 58
 4aa:	84 87       	std	Z+12, r24	; 0x0c
	show_data[16] = '\r';
 4ac:	8d e0       	ldi	r24, 0x0D	; 13
 4ae:	80 8b       	std	Z+16, r24	; 0x10
	show_data[17] = '\n';
 4b0:	8a e0       	ldi	r24, 0x0A	; 10
 4b2:	81 8b       	std	Z+17, r24	; 0x11

	while (1)
	{
		// UART #0 transmit task.
		UART0_Trn_Task();
 4b4:	0e 94 29 03 	call	0x652	; 0x652 <UART0_Trn_Task>
		// Timer #0 task.
		Timer0_Task();
 4b8:	0e 94 dd 02 	call	0x5ba	; 0x5ba <Timer0_Task>
		// SPI task.
		SPI_Task();
 4bc:	0e 94 7e 02 	call	0x4fc	; 0x4fc <SPI_Task>

		// LoRa RX task.
		LoRa_Rx_Task_Poll();
 4c0:	0e 94 ab 00 	call	0x156	; 0x156 <LoRa_Rx_Task_Poll>
		
		// LoRa RX task task flag check. 
		temp2 = lora_task_flag;
 4c4:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <lora_task_flag>
		temp2 &= 0x02;
 4c8:	89 2f       	mov	r24, r25
 4ca:	82 70       	andi	r24, 0x02	; 2
 4cc:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <temp2>
		if( temp2 == 0 ){
 4d0:	81 11       	cpse	r24, r1
 4d2:	f0 cf       	rjmp	.-32     	; 0x4b4 <main+0x86>
			// Set flag bit, start LoRa RX task.
			lora_task_flag |= 0x02;
 4d4:	92 60       	ori	r25, 0x02	; 2
 4d6:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <lora_task_flag>
			lora_rx_task_cnt = 0;
 4da:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <lora_rx_task_cnt>
			get_HT_for_Show();			
 4de:	0e 94 8f 01 	call	0x31e	; 0x31e <get_HT_for_Show>
 4e2:	e8 cf       	rjmp	.-48     	; 0x4b4 <main+0x86>

000004e4 <SPI_Init>:
	// SPI #1.
	// - MSB first.
	// - SCK = fosc/128.
	// CPOL = 0, CPHA = 0.
	// - Master mode.
	SPCR1 = 0x13;	
 4e4:	ec ea       	ldi	r30, 0xAC	; 172
 4e6:	f0 e0       	ldi	r31, 0x00	; 0
 4e8:	83 e1       	ldi	r24, 0x13	; 19
 4ea:	80 83       	st	Z, r24
	// SPI #1 enable.
	SPCR1 |= 0x40;
 4ec:	80 81       	ld	r24, Z
 4ee:	80 64       	ori	r24, 0x40	; 64
 4f0:	80 83       	st	Z, r24
	
	// For clear interrupt flag bit.
	temp1 = SPDR1;
 4f2:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 4f6:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <temp1>
 4fa:	08 95       	ret

000004fc <SPI_Task>:

// SPI task.
void SPI_Task( void )
{
	// Check interrupt flag bit.
	temp1 = SPSR1;
 4fc:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
	temp1 &= 0x80;	
 500:	80 78       	andi	r24, 0x80	; 128
 502:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <temp1>
	if( temp1 == 0 ){
 506:	88 23       	and	r24, r24
 508:	81 f1       	breq	.+96     	; 0x56a <SPI_Task+0x6e>
		return;
	}
	// Hold received data and clear interrupt flag bit.
	*spi_rec_ptr = SPDR1;
 50a:	e0 91 da 01 	lds	r30, 0x01DA	; 0x8001da <spi_rec_ptr>
 50e:	f0 91 db 01 	lds	r31, 0x01DB	; 0x8001db <spi_rec_ptr+0x1>
 512:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 516:	80 83       	st	Z, r24
	++spi_rec_ptr;
 518:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <spi_rec_ptr>
 51c:	90 91 db 01 	lds	r25, 0x01DB	; 0x8001db <spi_rec_ptr+0x1>
 520:	01 96       	adiw	r24, 0x01	; 1
 522:	90 93 db 01 	sts	0x01DB, r25	; 0x8001db <spi_rec_ptr+0x1>
 526:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <spi_rec_ptr>
	// Check data count.
	if( spi_data_cnt  ){
 52a:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <spi_data_cnt>
 52e:	88 23       	and	r24, r24
 530:	b1 f0       	breq	.+44     	; 0x55e <SPI_Task+0x62>
		
		// Transmit data.
		SPDR1 = *spi_trn_ptr;		
 532:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <spi_trn_ptr>
 536:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <spi_trn_ptr+0x1>
 53a:	80 81       	ld	r24, Z
 53c:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
		// for next data.
		++spi_trn_ptr;
 540:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <spi_trn_ptr>
 544:	90 91 c6 01 	lds	r25, 0x01C6	; 0x8001c6 <spi_trn_ptr+0x1>
 548:	01 96       	adiw	r24, 0x01	; 1
 54a:	90 93 c6 01 	sts	0x01C6, r25	; 0x8001c6 <spi_trn_ptr+0x1>
 54e:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <spi_trn_ptr>
		--spi_data_cnt;
 552:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <spi_data_cnt>
 556:	81 50       	subi	r24, 0x01	; 1
 558:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <spi_data_cnt>
		return;
 55c:	08 95       	ret
	}
	// SS output inactive.
	PORTE |= 0x04;
 55e:	72 9a       	sbi	0x0e, 2	; 14
	// Clear busy bit.
	spi_status_flag &= 0xfe;	
 560:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <spi_status_flag>
 564:	8e 7f       	andi	r24, 0xFE	; 254
 566:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <spi_status_flag>
 56a:	08 95       	ret

0000056c <SPI_Trigger_On>:

// SPI trigger on.
void SPI_Trigger_On( void )
{
	// Set busy flag bit.
	spi_status_flag |= 0x01;
 56c:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <spi_status_flag>
 570:	81 60       	ori	r24, 0x01	; 1
 572:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <spi_status_flag>
	// SS output active.
	PORTE &= 0xfb;
 576:	72 98       	cbi	0x0e, 2	; 14
	// Assign pointer to data array.
	//spi_rec_ptr = spi_rec_data;
	//spi_trn_ptr = spi_trn_data;
	// First byte output.
	// Check data count.
	if( spi_data_cnt  ){		
 578:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <spi_data_cnt>
 57c:	88 23       	and	r24, r24
 57e:	a9 f0       	breq	.+42     	; 0x5aa <SPI_Trigger_On+0x3e>
		// Transmit data.
		SPDR1 = *spi_trn_ptr;
 580:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <spi_trn_ptr>
 584:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <spi_trn_ptr+0x1>
 588:	80 81       	ld	r24, Z
 58a:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
		// for next data.
		++spi_trn_ptr;
 58e:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <spi_trn_ptr>
 592:	90 91 c6 01 	lds	r25, 0x01C6	; 0x8001c6 <spi_trn_ptr+0x1>
 596:	01 96       	adiw	r24, 0x01	; 1
 598:	90 93 c6 01 	sts	0x01C6, r25	; 0x8001c6 <spi_trn_ptr+0x1>
 59c:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <spi_trn_ptr>
		--spi_data_cnt;
 5a0:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <spi_data_cnt>
 5a4:	81 50       	subi	r24, 0x01	; 1
 5a6:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <spi_data_cnt>
 5aa:	08 95       	ret

000005ac <Timer0_Init>:
{
	// 8MHz oscillator, 0.125us * 1024 = 128us.
	// period, 128us * 256 = 32.768 ms.	
	
	// CTC mode, no output.
	TCCR0A = 0x02;
 5ac:	82 e0       	ldi	r24, 0x02	; 2
 5ae:	84 bd       	out	0x24, r24	; 36
	// Prescaler 1024.
	TCCR0B = 0x05; 
 5b0:	85 e0       	ldi	r24, 0x05	; 5
 5b2:	85 bd       	out	0x25, r24	; 37
	// comparator A.
	// - 10ms / 256us = 38.
	OCR0A = 39;
 5b4:	87 e2       	ldi	r24, 0x27	; 39
 5b6:	87 bd       	out	0x27, r24	; 39
 5b8:	08 95       	ret

000005ba <Timer0_Task>:

// Timer #0 task.
void Timer0_Task( void )
{
	// Check interrupt flag bit. 
	temp1 = TIFR0;
 5ba:	85 b3       	in	r24, 0x15	; 21
	temp1 &= 0x02;
 5bc:	82 70       	andi	r24, 0x02	; 2
 5be:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <temp1>
	if( temp1 == 0 ){
 5c2:	88 23       	and	r24, r24
 5c4:	c1 f0       	breq	.+48     	; 0x5f6 <Timer0_Task+0x3c>
		return;
	}
	// About 10ms past.
	// Clear flag bit.
	TIFR0 |= 0x02;	
 5c6:	a9 9a       	sbi	0x15, 1	; 21
	// UART #0 received time out.
	if( uart0_rec_cnt ){
 5c8:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <uart0_rec_cnt>
 5cc:	88 23       	and	r24, r24
 5ce:	61 f0       	breq	.+24     	; 0x5e8 <Timer0_Task+0x2e>
		++uart0_rec_to;
 5d0:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <uart0_rec_to>
 5d4:	8f 5f       	subi	r24, 0xFF	; 255
		if( uart0_rec_to == 20 ){
 5d6:	84 31       	cpi	r24, 0x14	; 20
 5d8:	19 f0       	breq	.+6      	; 0x5e0 <Timer0_Task+0x26>
	// About 10ms past.
	// Clear flag bit.
	TIFR0 |= 0x02;	
	// UART #0 received time out.
	if( uart0_rec_cnt ){
		++uart0_rec_to;
 5da:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <uart0_rec_to>
 5de:	04 c0       	rjmp	.+8      	; 0x5e8 <Timer0_Task+0x2e>
		if( uart0_rec_to == 20 ){
			uart0_rec_to = 0;
 5e0:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <uart0_rec_to>
			uart0_rec_cnt = 0;
 5e4:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <uart0_rec_cnt>
		}		
	}
	
	// Delay count.
	if( delay_cnt ){
 5e8:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <delay_cnt>
 5ec:	88 23       	and	r24, r24
 5ee:	19 f0       	breq	.+6      	; 0x5f6 <Timer0_Task+0x3c>
		--delay_cnt;
 5f0:	81 50       	subi	r24, 0x01	; 1
 5f2:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <delay_cnt>
 5f6:	08 95       	ret

000005f8 <__vector_18>:
#include "var.h"


// UART #0 received ISR.
ISR( USART0_RX_vect )
{
 5f8:	1f 92       	push	r1
 5fa:	0f 92       	push	r0
 5fc:	0f b6       	in	r0, 0x3f	; 63
 5fe:	0f 92       	push	r0
 600:	11 24       	eor	r1, r1
 602:	8f 93       	push	r24
 604:	9f 93       	push	r25
 606:	ef 93       	push	r30
 608:	ff 93       	push	r31
	// Clear received time out.
	uart0_rec_to = 0;
 60a:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <uart0_rec_to>
	// Hold received data.		
	uart0_rec_data[uart0_rec_cnt] = UDR0;
 60e:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <uart0_rec_cnt>
 612:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 616:	e8 2f       	mov	r30, r24
 618:	f0 e0       	ldi	r31, 0x00	; 0
 61a:	e3 58       	subi	r30, 0x83	; 131
 61c:	fe 4f       	sbci	r31, 0xFE	; 254
 61e:	90 83       	st	Z, r25
	if( uart0_rec_cnt < 16 ){
 620:	80 31       	cpi	r24, 0x10	; 16
 622:	18 f4       	brcc	.+6      	; 0x62a <__vector_18+0x32>
		++uart0_rec_cnt;
 624:	8f 5f       	subi	r24, 0xFF	; 255
 626:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <uart0_rec_cnt>
	} 
}
 62a:	ff 91       	pop	r31
 62c:	ef 91       	pop	r30
 62e:	9f 91       	pop	r25
 630:	8f 91       	pop	r24
 632:	0f 90       	pop	r0
 634:	0f be       	out	0x3f, r0	; 63
 636:	0f 90       	pop	r0
 638:	1f 90       	pop	r1
 63a:	18 95       	reti

0000063c <UART0_Init>:

// UART #0 initialize.
void UART0_Init( void )
{
	// 9600 bps @ 8MHz.
	UBRR0H = 0;
 63c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = 51;
 640:	83 e3       	ldi	r24, 0x33	; 51
 642:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	// RX interrupt enable.
	// RX enable.
	// TX enable.
	// 8 bit data.
	// No parity.
	UCSR0B = 0x98;
 646:	88 e9       	ldi	r24, 0x98	; 152
 648:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	
	uart0_trn_cnt = 0;
 64c:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <uart0_trn_cnt>
 650:	08 95       	ret

00000652 <UART0_Trn_Task>:

// UART #0 transmit task.
void UART0_Trn_Task( void )
{
	// Check data counter.
	if( uart0_trn_cnt == 0 ){
 652:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <uart0_trn_cnt>
 656:	81 11       	cpse	r24, r1
 658:	15 c0       	rjmp	.+42     	; 0x684 <UART0_Trn_Task+0x32>
		// Check show data update flag bit.				
		temp1 = lora_task_flag;		
 65a:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <lora_task_flag>
		temp1 &= 0x08;
 65e:	98 2f       	mov	r25, r24
 660:	98 70       	andi	r25, 0x08	; 8
 662:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <temp1>
		if( temp1 ){
 666:	99 23       	and	r25, r25
 668:	49 f1       	breq	.+82     	; 0x6bc <UART0_Trn_Task+0x6a>
			// Clear flag bit.
			lora_task_flag &= 0xf7;
 66a:	87 7f       	andi	r24, 0xF7	; 247
 66c:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <lora_task_flag>
			// Transmit data setting.
			uart0_trn_cnt = 18;	
 670:	82 e1       	ldi	r24, 0x12	; 18
 672:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <uart0_trn_cnt>
			uart0_trn_ptr = show_data;	
 676:	86 e3       	ldi	r24, 0x36	; 54
 678:	91 e0       	ldi	r25, 0x01	; 1
 67a:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <uart0_trn_ptr+0x1>
 67e:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <uart0_trn_ptr>
 682:	08 95       	ret
		}
		return;
	}
	// Check transmit buffer.
	temp1 = UCSR0A;
 684:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	temp1 &= 0x20;
 688:	80 72       	andi	r24, 0x20	; 32
 68a:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <temp1>
	if( temp1 == 0 ){
 68e:	88 23       	and	r24, r24
 690:	a9 f0       	breq	.+42     	; 0x6bc <UART0_Trn_Task+0x6a>
		return;
	}
	// Data out.
	UDR0 = *uart0_trn_ptr;
 692:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <uart0_trn_ptr>
 696:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <uart0_trn_ptr+0x1>
 69a:	80 81       	ld	r24, Z
 69c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	// Next data.
	++uart0_trn_ptr;
 6a0:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <uart0_trn_ptr>
 6a4:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <uart0_trn_ptr+0x1>
 6a8:	01 96       	adiw	r24, 0x01	; 1
 6aa:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <uart0_trn_ptr+0x1>
 6ae:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <uart0_trn_ptr>
	--uart0_trn_cnt;
 6b2:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <uart0_trn_cnt>
 6b6:	81 50       	subi	r24, 0x01	; 1
 6b8:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <uart0_trn_cnt>
 6bc:	08 95       	ret

000006be <_exit>:
 6be:	f8 94       	cli

000006c0 <__stop_program>:
 6c0:	ff cf       	rjmp	.-2      	; 0x6c0 <__stop_program>
