
LoRa_TX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  000008f8  000009ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008f8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000082  00800136  00800136  000009e2  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  000009e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000009e5  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a18  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000001d8  00000000  00000000  00000a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001f45  00000000  00000000  00000c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000577  00000000  00000000  00002b75  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000fae  00000000  00000000  000030ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002ec  00000000  00000000  0000409c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000054a  00000000  00000000  00004388  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000000c1  00000000  00000000  000048d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000148  00000000  00000000  00004993  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 ab 00 	jmp	0x156	; 0x156 <__ctors_end>
   4:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
   8:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
   c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  10:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  14:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  18:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  1c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  20:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  24:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  28:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  2c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  30:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  34:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  38:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  3c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  40:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  44:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  48:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  4c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  50:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  54:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  58:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  5c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  60:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  64:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  68:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  6c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  70:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  74:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  78:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  7c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  80:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  84:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  88:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  8c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  90:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  94:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  98:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  9c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  a0:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  a4:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  a8:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  ac:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  b0:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
  b4:	2e 04       	cpc	r2, r14
  b6:	37 04       	cpc	r3, r7
  b8:	37 04       	cpc	r3, r7
  ba:	37 04       	cpc	r3, r7
  bc:	37 04       	cpc	r3, r7
  be:	37 04       	cpc	r3, r7
  c0:	37 04       	cpc	r3, r7
  c2:	37 04       	cpc	r3, r7
  c4:	37 04       	cpc	r3, r7
  c6:	37 04       	cpc	r3, r7
  c8:	37 04       	cpc	r3, r7
  ca:	37 04       	cpc	r3, r7
  cc:	37 04       	cpc	r3, r7
  ce:	37 04       	cpc	r3, r7
  d0:	37 04       	cpc	r3, r7
  d2:	37 04       	cpc	r3, r7
  d4:	0b 04       	cpc	r0, r11
  d6:	37 04       	cpc	r3, r7
  d8:	37 04       	cpc	r3, r7
  da:	37 04       	cpc	r3, r7
  dc:	37 04       	cpc	r3, r7
  de:	37 04       	cpc	r3, r7
  e0:	37 04       	cpc	r3, r7
  e2:	37 04       	cpc	r3, r7
  e4:	08 04       	cpc	r0, r8
  e6:	37 04       	cpc	r3, r7
  e8:	37 04       	cpc	r3, r7
  ea:	37 04       	cpc	r3, r7
  ec:	37 04       	cpc	r3, r7
  ee:	37 04       	cpc	r3, r7
  f0:	37 04       	cpc	r3, r7
  f2:	37 04       	cpc	r3, r7
  f4:	0b 04       	cpc	r0, r11
  f6:	37 04       	cpc	r3, r7
  f8:	37 04       	cpc	r3, r7
  fa:	37 04       	cpc	r3, r7
  fc:	37 04       	cpc	r3, r7
  fe:	37 04       	cpc	r3, r7
 100:	37 04       	cpc	r3, r7
 102:	37 04       	cpc	r3, r7
 104:	08 04       	cpc	r0, r8
 106:	37 04       	cpc	r3, r7
 108:	37 04       	cpc	r3, r7
 10a:	37 04       	cpc	r3, r7
 10c:	37 04       	cpc	r3, r7
 10e:	37 04       	cpc	r3, r7
 110:	37 04       	cpc	r3, r7
 112:	37 04       	cpc	r3, r7
 114:	37 04       	cpc	r3, r7
 116:	37 04       	cpc	r3, r7
 118:	37 04       	cpc	r3, r7
 11a:	37 04       	cpc	r3, r7
 11c:	37 04       	cpc	r3, r7
 11e:	37 04       	cpc	r3, r7
 120:	37 04       	cpc	r3, r7
 122:	37 04       	cpc	r3, r7
 124:	f1 03       	fmuls	r23, r17
 126:	37 04       	cpc	r3, r7
 128:	37 04       	cpc	r3, r7
 12a:	37 04       	cpc	r3, r7
 12c:	37 04       	cpc	r3, r7
 12e:	37 04       	cpc	r3, r7
 130:	37 04       	cpc	r3, r7
 132:	37 04       	cpc	r3, r7
 134:	37 04       	cpc	r3, r7
 136:	37 04       	cpc	r3, r7
 138:	37 04       	cpc	r3, r7
 13a:	37 04       	cpc	r3, r7
 13c:	37 04       	cpc	r3, r7
 13e:	37 04       	cpc	r3, r7
 140:	37 04       	cpc	r3, r7
 142:	37 04       	cpc	r3, r7
 144:	e0 03       	fmuls	r22, r16
 146:	37 04       	cpc	r3, r7
 148:	37 04       	cpc	r3, r7
 14a:	37 04       	cpc	r3, r7
 14c:	37 04       	cpc	r3, r7
 14e:	37 04       	cpc	r3, r7
 150:	37 04       	cpc	r3, r7
 152:	37 04       	cpc	r3, r7
 154:	e0 03       	fmuls	r22, r16

00000156 <__ctors_end>:
 156:	11 24       	eor	r1, r1
 158:	1f be       	out	0x3f, r1	; 63
 15a:	cf ef       	ldi	r28, 0xFF	; 255
 15c:	d8 e0       	ldi	r29, 0x08	; 8
 15e:	de bf       	out	0x3e, r29	; 62
 160:	cd bf       	out	0x3d, r28	; 61

00000162 <__do_copy_data>:
 162:	11 e0       	ldi	r17, 0x01	; 1
 164:	a0 e0       	ldi	r26, 0x00	; 0
 166:	b1 e0       	ldi	r27, 0x01	; 1
 168:	e8 ef       	ldi	r30, 0xF8	; 248
 16a:	f8 e0       	ldi	r31, 0x08	; 8
 16c:	02 c0       	rjmp	.+4      	; 0x172 <__do_copy_data+0x10>
 16e:	05 90       	lpm	r0, Z+
 170:	0d 92       	st	X+, r0
 172:	a6 33       	cpi	r26, 0x36	; 54
 174:	b1 07       	cpc	r27, r17
 176:	d9 f7       	brne	.-10     	; 0x16e <__do_copy_data+0xc>

00000178 <__do_clear_bss>:
 178:	21 e0       	ldi	r18, 0x01	; 1
 17a:	a6 e3       	ldi	r26, 0x36	; 54
 17c:	b1 e0       	ldi	r27, 0x01	; 1
 17e:	01 c0       	rjmp	.+2      	; 0x182 <.do_clear_bss_start>

00000180 <.do_clear_bss_loop>:
 180:	1d 92       	st	X+, r1

00000182 <.do_clear_bss_start>:
 182:	a8 3b       	cpi	r26, 0xB8	; 184
 184:	b2 07       	cpc	r27, r18
 186:	e1 f7       	brne	.-8      	; 0x180 <.do_clear_bss_loop>
 188:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <main>
 18c:	0c 94 7a 04 	jmp	0x8f4	; 0x8f4 <_exit>

00000190 <__bad_interrupt>:
 190:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000194 <ADC_Init>:
void ADC_Init( void )
{
	// Reference on VACC.
	// Data right align.
	// ADC5.
	ADMUX = 0x65;
 194:	85 e6       	ldi	r24, 0x65	; 101
 196:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// Power reduction ADC off, for ADC.
	PRR0 &= 0xfe;
 19a:	e4 e6       	ldi	r30, 0x64	; 100
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	8e 7f       	andi	r24, 0xFE	; 254
 1a2:	80 83       	st	Z, r24
	// Single conversion ( no auto trigger ). 
	// Clock division 128.
	ADCSRA = 0x97;
 1a4:	ea e7       	ldi	r30, 0x7A	; 122
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	87 e9       	ldi	r24, 0x97	; 151
 1aa:	80 83       	st	Z, r24
	// Start conversion.
	ADCSRA |= 0x40;	
 1ac:	80 81       	ld	r24, Z
 1ae:	80 64       	ori	r24, 0x40	; 64
 1b0:	80 83       	st	Z, r24
 1b2:	08 95       	ret

000001b4 <ADC_Task>:

// ADC task.
void ADC_Task( void )
{
	// ADC interrupt flag bit check.
	temp1 = ADCSRA;
 1b4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	temp1 &= 0x10;
 1b8:	80 71       	andi	r24, 0x10	; 16
 1ba:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <temp1>
	if( temp1 == 0 ){
 1be:	88 23       	and	r24, r24
 1c0:	61 f0       	breq	.+24     	; 0x1da <ADC_Task+0x26>
		return;
	}
	// Clear flag bit.
	ADCSRA |= 0x10;
 1c2:	ea e7       	ldi	r30, 0x7A	; 122
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	80 61       	ori	r24, 0x10	; 16
 1ca:	80 83       	st	Z, r24
	// Keep ADC value.
	adc_value = ADCH;	
 1cc:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 1d0:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <adc_value>
	// Start conversion.
	ADCSRA |= 0x40;	
 1d4:	80 81       	ld	r24, Z
 1d6:	80 64       	ori	r24, 0x40	; 64
 1d8:	80 83       	st	Z, r24
 1da:	08 95       	ret

000001dc <Device_Task>:
#include "HIH6130.h"
#include "Lora_Task.h"
#include "var.h"

// device task.
void Device_Task( void ){
 1dc:	cf 92       	push	r12
 1de:	df 92       	push	r13
 1e0:	ef 92       	push	r14
 1e2:	ff 92       	push	r15
 1e4:	cf 93       	push	r28
 1e6:	df 93       	push	r29
	
	// check delay counter.
	if( delay_cnt ){
 1e8:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <delay_cnt>
 1ec:	81 11       	cpse	r24, r1
 1ee:	cd c0       	rjmp	.+410    	; 0x38a <Device_Task+0x1ae>
		return;
	}
		
	// TWI task busy check.
	temp1 = twi1_task_status;
	temp1 &= 0x01;
 1f0:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <twi1_task_status>
 1f4:	81 70       	andi	r24, 0x01	; 1
 1f6:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <temp1>
	if( temp1 ){
 1fa:	81 11       	cpse	r24, r1
 1fc:	c6 c0       	rjmp	.+396    	; 0x38a <Device_Task+0x1ae>
		// Still busy.
		return;
	}
	
	// Check LoRa TX busy bit.
	temp1 = lora_task_flag;
 1fe:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <lora_task_flag>
	temp1 &= 0x01;
 202:	89 2f       	mov	r24, r25
 204:	81 70       	andi	r24, 0x01	; 1
 206:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <temp1>
	if( temp1 ){
 20a:	81 11       	cpse	r24, r1
 20c:	be c0       	rjmp	.+380    	; 0x38a <Device_Task+0x1ae>
		return;
	}
			
	switch( dev_task_cnt ){
 20e:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <dev_task_cnt>
 212:	82 30       	cpi	r24, 0x02	; 2
 214:	01 f1       	breq	.+64     	; 0x256 <Device_Task+0x7a>
 216:	28 f4       	brcc	.+10     	; 0x222 <Device_Task+0x46>
 218:	88 23       	and	r24, r24
 21a:	51 f0       	breq	.+20     	; 0x230 <Device_Task+0x54>
 21c:	81 30       	cpi	r24, 0x01	; 1
 21e:	99 f0       	breq	.+38     	; 0x246 <Device_Task+0x6a>
 220:	b4 c0       	rjmp	.+360    	; 0x38a <Device_Task+0x1ae>
 222:	83 30       	cpi	r24, 0x03	; 3
 224:	09 f4       	brne	.+2      	; 0x228 <Device_Task+0x4c>
 226:	9b c0       	rjmp	.+310    	; 0x35e <Device_Task+0x182>
 228:	84 30       	cpi	r24, 0x04	; 4
 22a:	09 f4       	brne	.+2      	; 0x22e <Device_Task+0x52>
 22c:	a7 c0       	rjmp	.+334    	; 0x37c <Device_Task+0x1a0>
 22e:	ad c0       	rjmp	.+346    	; 0x38a <Device_Task+0x1ae>
				
		case 0:
			// Start HIH6130 measurement.	
			HIHI6130_Measure_Request();
 230:	0e 94 cc 01 	call	0x398	; 0x398 <HIHI6130_Measure_Request>
			// Next task.
			++dev_task_cnt;
 234:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <dev_task_cnt>
 238:	8f 5f       	subi	r24, 0xFF	; 255
 23a:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <dev_task_cnt>
			// Reset measurement delay count.
			// 100ms.
			delay_cnt = 10;
 23e:	8a e0       	ldi	r24, 0x0A	; 10
 240:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <delay_cnt>
			break;
 244:	a2 c0       	rjmp	.+324    	; 0x38a <Device_Task+0x1ae>
					
		case 1:
			// Read measurement data.
			HIH6130_I2C_On_HT();
 246:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <HIH6130_I2C_On_HT>
			// Next task.
			++dev_task_cnt;			
 24a:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <dev_task_cnt>
 24e:	8f 5f       	subi	r24, 0xFF	; 255
 250:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <dev_task_cnt>
			break;
 254:	9a c0       	rjmp	.+308    	; 0x38a <Device_Task+0x1ae>
		
		case 2:
			// Prepare TX data.
			// HIH6130 humidity.
			temp5 = twi1_data[0];
 256:	c4 e7       	ldi	r28, 0x74	; 116
 258:	d1 e0       	ldi	r29, 0x01	; 1
 25a:	28 81       	ld	r18, Y
 25c:	82 2f       	mov	r24, r18
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	a0 e0       	ldi	r26, 0x00	; 0
 262:	b0 e0       	ldi	r27, 0x00	; 0
			temp5 <<= 8;
 264:	ba 2f       	mov	r27, r26
 266:	a9 2f       	mov	r26, r25
 268:	98 2f       	mov	r25, r24
 26a:	88 27       	eor	r24, r24
			temp5 &= 0x3f00;
 26c:	ac 01       	movw	r20, r24
 26e:	bd 01       	movw	r22, r26
 270:	44 27       	eor	r20, r20
 272:	5f 73       	andi	r21, 0x3F	; 63
 274:	66 27       	eor	r22, r22
 276:	77 27       	eor	r23, r23
			temp5 |= twi1_data[1];		
 278:	89 81       	ldd	r24, Y+1	; 0x01
 27a:	9a 01       	movw	r18, r20
 27c:	ab 01       	movw	r20, r22
 27e:	28 2b       	or	r18, r24
			temp5 *= 100;
 280:	a4 e6       	ldi	r26, 0x64	; 100
 282:	b0 e0       	ldi	r27, 0x00	; 0
 284:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__muluhisi3>
			temp5 /= 16383;		
 288:	0f 2e       	mov	r0, r31
 28a:	cc 24       	eor	r12, r12
 28c:	ca 94       	dec	r12
 28e:	ff e3       	ldi	r31, 0x3F	; 63
 290:	df 2e       	mov	r13, r31
 292:	e1 2c       	mov	r14, r1
 294:	f1 2c       	mov	r15, r1
 296:	f0 2d       	mov	r31, r0
 298:	a7 01       	movw	r20, r14
 29a:	96 01       	movw	r18, r12
 29c:	0e 94 38 04 	call	0x870	; 0x870 <__udivmodsi4>
			rf_tx_data[0] = (uint8_t)temp5;		
 2a0:	20 93 a3 01 	sts	0x01A3, r18	; 0x8001a3 <rf_tx_data>
			// HIH6130 temperature.
			temp5 = twi1_data[2];
 2a4:	4a 81       	ldd	r20, Y+2	; 0x02
 2a6:	50 e0       	ldi	r21, 0x00	; 0
 2a8:	60 e0       	ldi	r22, 0x00	; 0
 2aa:	70 e0       	ldi	r23, 0x00	; 0
			temp5 <<= 8;
			temp5 &= 0xff00;
 2ac:	76 2f       	mov	r23, r22
 2ae:	65 2f       	mov	r22, r21
 2b0:	54 2f       	mov	r21, r20
 2b2:	44 27       	eor	r20, r20
			temp5 |= twi1_data[3];
 2b4:	8b 81       	ldd	r24, Y+3	; 0x03
 2b6:	48 2b       	or	r20, r24
			temp5 >>= 2;
 2b8:	9a 01       	movw	r18, r20
 2ba:	ab 01       	movw	r20, r22
 2bc:	56 95       	lsr	r21
 2be:	47 95       	ror	r20
 2c0:	37 95       	ror	r19
 2c2:	27 95       	ror	r18
 2c4:	56 95       	lsr	r21
 2c6:	47 95       	ror	r20
 2c8:	37 95       	ror	r19
 2ca:	27 95       	ror	r18
			temp5 *= 165;
 2cc:	a5 ea       	ldi	r26, 0xA5	; 165
 2ce:	b0 e0       	ldi	r27, 0x00	; 0
 2d0:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__muluhisi3>
			temp5 /= 16383;		
 2d4:	a7 01       	movw	r20, r14
 2d6:	96 01       	movw	r18, r12
 2d8:	0e 94 38 04 	call	0x870	; 0x870 <__udivmodsi4>
			temp1 = 0x00;		// Minus Sign.
 2dc:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <temp1>
			if( temp5 < 40 ){
 2e0:	28 32       	cpi	r18, 0x28	; 40
 2e2:	31 05       	cpc	r19, r1
 2e4:	41 05       	cpc	r20, r1
 2e6:	51 05       	cpc	r21, r1
 2e8:	e0 f4       	brcc	.+56     	; 0x322 <Device_Task+0x146>
				temp6 = temp5;
 2ea:	20 93 6f 01 	sts	0x016F, r18	; 0x80016f <temp6>
 2ee:	30 93 70 01 	sts	0x0170, r19	; 0x800170 <temp6+0x1>
 2f2:	40 93 71 01 	sts	0x0171, r20	; 0x800171 <temp6+0x2>
 2f6:	50 93 72 01 	sts	0x0172, r21	; 0x800172 <temp6+0x3>
				temp5 = 40;
				temp5 -= temp6;
 2fa:	88 e2       	ldi	r24, 0x28	; 40
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	a0 e0       	ldi	r26, 0x00	; 0
 300:	b0 e0       	ldi	r27, 0x00	; 0
 302:	82 1b       	sub	r24, r18
 304:	93 0b       	sbc	r25, r19
 306:	a4 0b       	sbc	r26, r20
 308:	b5 0b       	sbc	r27, r21
 30a:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <temp5>
 30e:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <temp5+0x1>
 312:	a0 93 6b 01 	sts	0x016B, r26	; 0x80016b <temp5+0x2>
 316:	b0 93 6c 01 	sts	0x016C, r27	; 0x80016c <temp5+0x3>
				temp1 = 0x80;
 31a:	80 e8       	ldi	r24, 0x80	; 128
 31c:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <temp1>
 320:	0d c0       	rjmp	.+26     	; 0x33c <Device_Task+0x160>
			}
			else{
				temp5 -= 40;
 322:	da 01       	movw	r26, r20
 324:	c9 01       	movw	r24, r18
 326:	88 97       	sbiw	r24, 0x28	; 40
 328:	a1 09       	sbc	r26, r1
 32a:	b1 09       	sbc	r27, r1
 32c:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <temp5>
 330:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <temp5+0x1>
 334:	a0 93 6b 01 	sts	0x016B, r26	; 0x80016b <temp5+0x2>
 338:	b0 93 6c 01 	sts	0x016C, r27	; 0x80016c <temp5+0x3>
			}		
			rf_tx_data[1] = (uint8_t)temp5;
			rf_tx_data[1] |= temp1;
 33c:	e3 ea       	ldi	r30, 0xA3	; 163
 33e:	f1 e0       	ldi	r31, 0x01	; 1
 340:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <temp5>
 344:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <temp1>
 348:	89 2b       	or	r24, r25
 34a:	81 83       	std	Z+1, r24	; 0x01
			// ADC data.
			rf_tx_data[2] = adc_value;
 34c:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <adc_value>
 350:	82 83       	std	Z+2, r24	; 0x02
			// Next task.
			++dev_task_cnt;
 352:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <dev_task_cnt>
 356:	8f 5f       	subi	r24, 0xFF	; 255
 358:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <dev_task_cnt>
			break;
 35c:	16 c0       	rjmp	.+44     	; 0x38a <Device_Task+0x1ae>
				
		case 3:			
			// CRC.
			rf_tx_data[9] = rf_tx_data[0];
			rf_tx_data[9] += rf_tx_data[1];
			rf_tx_data[9] += rf_tx_data[2];
 35e:	e3 ea       	ldi	r30, 0xA3	; 163
 360:	f1 e0       	ldi	r31, 0x01	; 1
			break;
				
		case 3:			
			// CRC.
			rf_tx_data[9] = rf_tx_data[0];
			rf_tx_data[9] += rf_tx_data[1];
 362:	91 81       	ldd	r25, Z+1	; 0x01
 364:	80 81       	ld	r24, Z
 366:	89 0f       	add	r24, r25
			rf_tx_data[9] += rf_tx_data[2];
 368:	92 81       	ldd	r25, Z+2	; 0x02
 36a:	89 0f       	add	r24, r25
 36c:	81 87       	std	Z+9, r24	; 0x09
			// 900ms delay.
			delay_cnt = 90;			
 36e:	8a e5       	ldi	r24, 0x5A	; 90
 370:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <delay_cnt>
			// Next task.
			++dev_task_cnt;
 374:	84 e0       	ldi	r24, 0x04	; 4
 376:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <dev_task_cnt>
			break;
 37a:	07 c0       	rjmp	.+14     	; 0x38a <Device_Task+0x1ae>
			
		case 4:
			// Start LoRa TX task.
			lora_task_flag |= 0x01;
 37c:	91 60       	ori	r25, 0x01	; 1
 37e:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <lora_task_flag>
			lora_tx_task_cnt = 0;			
 382:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <lora_tx_task_cnt>
			// Next task.
			dev_task_cnt = 0;
 386:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <dev_task_cnt>
			break;	
	}
}
 38a:	df 91       	pop	r29
 38c:	cf 91       	pop	r28
 38e:	ff 90       	pop	r15
 390:	ef 90       	pop	r14
 392:	df 90       	pop	r13
 394:	cf 90       	pop	r12
 396:	08 95       	ret

00000398 <HIHI6130_Measure_Request>:

// Measurement request.
void HIHI6130_Measure_Request( void )
{
	// SLA.
    twi1_addr = HIH6130_WR;
 398:	8e e4       	ldi	r24, 0x4E	; 78
 39a:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <twi1_addr>
	// 0 byte to write.
	twi1_data_cnt = 0;	        
 39e:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <twi1_data_cnt>
    // Trigger on write task.
	TWI1_On_Write();
 3a2:	0e 94 b4 03 	call	0x768	; 0x768 <TWI1_On_Write>
 3a6:	08 95       	ret

000003a8 <HIH6130_I2C_On_HT>:

// Read humidity and temperature data.
void HIH6130_I2C_On_HT( void )
{	
	// SLA.
    twi1_addr = HIH6130_RD;        	
 3a8:	8f e4       	ldi	r24, 0x4F	; 79
 3aa:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <twi1_addr>
	// 4 byte to read.
	twi1_data_cnt = 4;
 3ae:	84 e0       	ldi	r24, 0x04	; 4
 3b0:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <twi1_data_cnt>
	// Trigger on read task.
	TWI1_On_Read();	
 3b4:	0e 94 bd 03 	call	0x77a	; 0x77a <TWI1_On_Read>
 3b8:	08 95       	ret

000003ba <IO_Init>:
}

// Data LED off.
void IO_Data_LED_Off( void )
{
	PORTD &= 0xdf;	
 3ba:	8c e0       	ldi	r24, 0x0C	; 12
 3bc:	8d b9       	out	0x0d, r24	; 13
 3be:	86 e0       	ldi	r24, 0x06	; 6
 3c0:	87 b9       	out	0x07, r24	; 7
 3c2:	80 ee       	ldi	r24, 0xE0	; 224
 3c4:	8a b9       	out	0x0a, r24	; 10
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	84 b9       	out	0x04, r24	; 4
 3ca:	72 9a       	sbi	0x0e, 2	; 14
 3cc:	42 9a       	sbi	0x08, 2	; 8
 3ce:	28 98       	cbi	0x05, 0	; 5
 3d0:	5f 9a       	sbi	0x0b, 7	; 11
 3d2:	8b b1       	in	r24, 0x0b	; 11
 3d4:	8f 79       	andi	r24, 0x9F	; 159
 3d6:	8b b9       	out	0x0b, r24	; 11
 3d8:	08 95       	ret

000003da <IO_Data_LED_Toggle>:
}

// Data LED toggle.
void IO_Data_LED_Toggle( void )
{
	temp1 = PORTD;
 3da:	8b b1       	in	r24, 0x0b	; 11
	temp1 &= 0x20;	
 3dc:	80 72       	andi	r24, 0x20	; 32
 3de:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <temp1>
	if( temp1 ){
 3e2:	88 23       	and	r24, r24
 3e4:	11 f0       	breq	.+4      	; 0x3ea <IO_Data_LED_Toggle+0x10>
		PORTD &= 0xdf;
 3e6:	5d 98       	cbi	0x0b, 5	; 11
		return;		
 3e8:	08 95       	ret
	}
	PORTD |= 0x20;	
 3ea:	5d 9a       	sbi	0x0b, 5	; 11
 3ec:	08 95       	ret

000003ee <SX1272_TX_Switch_On>:
				return;
			}
			// Next task.
			++lora_rx_task_cnt;
			// Clear status flag bit.
			lora_task_flag &= 0xfd;		
 3ee:	5f 98       	cbi	0x0b, 7	; 11
 3f0:	28 9a       	sbi	0x05, 0	; 5
 3f2:	08 95       	ret

000003f4 <SX1272_Reset_Off>:
 3f4:	42 98       	cbi	0x08, 2	; 8
 3f6:	3a 98       	cbi	0x07, 2	; 7
 3f8:	08 95       	ret

000003fa <SX1272_Reg_Access_On>:
 3fa:	89 e4       	ldi	r24, 0x49	; 73
 3fc:	91 e0       	ldi	r25, 0x01	; 1
 3fe:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <spi_trn_ptr+0x1>
 402:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <spi_trn_ptr>
 406:	80 e8       	ldi	r24, 0x80	; 128
 408:	91 e0       	ldi	r25, 0x01	; 1
 40a:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <spi_rec_ptr+0x1>
 40e:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <spi_rec_ptr>
 412:	82 e0       	ldi	r24, 0x02	; 2
 414:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <spi_data_cnt>
 418:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <SPI_Trigger_On>
 41c:	08 95       	ret

0000041e <LoRa_Tx_Task_Poll>:
 41e:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <lora_task_flag>
 422:	89 2f       	mov	r24, r25
 424:	81 70       	andi	r24, 0x01	; 1
 426:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <temp2>
 42a:	88 23       	and	r24, r24
 42c:	09 f4       	brne	.+2      	; 0x430 <LoRa_Tx_Task_Poll+0x12>
 42e:	a4 c0       	rjmp	.+328    	; 0x578 <LoRa_Tx_Task_Poll+0x15a>
 430:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <spi_status_flag>
 434:	81 70       	andi	r24, 0x01	; 1
 436:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <temp2>
 43a:	81 11       	cpse	r24, r1
 43c:	9d c0       	rjmp	.+314    	; 0x578 <LoRa_Tx_Task_Poll+0x15a>
 43e:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <lora_tx_task_cnt>
 442:	82 30       	cpi	r24, 0x02	; 2
 444:	09 f4       	brne	.+2      	; 0x448 <LoRa_Tx_Task_Poll+0x2a>
 446:	4d c0       	rjmp	.+154    	; 0x4e2 <LoRa_Tx_Task_Poll+0xc4>
 448:	28 f4       	brcc	.+10     	; 0x454 <LoRa_Tx_Task_Poll+0x36>
 44a:	88 23       	and	r24, r24
 44c:	61 f0       	breq	.+24     	; 0x466 <LoRa_Tx_Task_Poll+0x48>
 44e:	81 30       	cpi	r24, 0x01	; 1
 450:	c9 f0       	breq	.+50     	; 0x484 <LoRa_Tx_Task_Poll+0x66>
 452:	08 95       	ret
 454:	84 30       	cpi	r24, 0x04	; 4
 456:	09 f4       	brne	.+2      	; 0x45a <LoRa_Tx_Task_Poll+0x3c>
 458:	6f c0       	rjmp	.+222    	; 0x538 <LoRa_Tx_Task_Poll+0x11a>
 45a:	08 f4       	brcc	.+2      	; 0x45e <LoRa_Tx_Task_Poll+0x40>
 45c:	5f c0       	rjmp	.+190    	; 0x51c <LoRa_Tx_Task_Poll+0xfe>
 45e:	85 30       	cpi	r24, 0x05	; 5
 460:	09 f4       	brne	.+2      	; 0x464 <LoRa_Tx_Task_Poll+0x46>
 462:	79 c0       	rjmp	.+242    	; 0x556 <LoRa_Tx_Task_Poll+0x138>
 464:	08 95       	ret
 466:	0e 94 ed 01 	call	0x3da	; 0x3da <IO_Data_LED_Toggle>
 46a:	0e 94 f7 01 	call	0x3ee	; 0x3ee <SX1272_TX_Switch_On>
 46e:	88 e0       	ldi	r24, 0x08	; 8
 470:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <lora_para_cnt>
 474:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <lora_para_index>
 478:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <lora_tx_task_cnt>
 47c:	8f 5f       	subi	r24, 0xFF	; 255
 47e:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <lora_tx_task_cnt>
 482:	08 95       	ret
 484:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <lora_para_index>
 488:	a9 e4       	ldi	r26, 0x49	; 73
 48a:	b1 e0       	ldi	r27, 0x01	; 1
 48c:	e8 2f       	mov	r30, r24
 48e:	f0 e0       	ldi	r31, 0x00	; 0
 490:	e0 50       	subi	r30, 0x00	; 0
 492:	ff 4f       	sbci	r31, 0xFF	; 255
 494:	90 81       	ld	r25, Z
 496:	9c 93       	st	X, r25
 498:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <lora_para_cnt>
 49c:	e1 e0       	ldi	r30, 0x01	; 1
 49e:	e8 0f       	add	r30, r24
 4a0:	f0 e0       	ldi	r31, 0x00	; 0
 4a2:	e0 50       	subi	r30, 0x00	; 0
 4a4:	ff 4f       	sbci	r31, 0xFF	; 255
 4a6:	20 81       	ld	r18, Z
 4a8:	11 96       	adiw	r26, 0x01	; 1
 4aa:	2c 93       	st	X, r18
 4ac:	8e 5f       	subi	r24, 0xFE	; 254
 4ae:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <lora_para_index>
 4b2:	8e ef       	ldi	r24, 0xFE	; 254
 4b4:	89 0f       	add	r24, r25
 4b6:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <lora_para_cnt>
 4ba:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SX1272_Reg_Access_On>
 4be:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <lora_para_cnt>
 4c2:	81 11       	cpse	r24, r1
 4c4:	59 c0       	rjmp	.+178    	; 0x578 <LoRa_Tx_Task_Poll+0x15a>
 4c6:	8a e0       	ldi	r24, 0x0A	; 10
 4c8:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <lora_para_cnt>
 4cc:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <lora_para_index>
 4d0:	80 e8       	ldi	r24, 0x80	; 128
 4d2:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <spi_trn_data>
 4d6:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <lora_tx_task_cnt>
 4da:	8f 5f       	subi	r24, 0xFF	; 255
 4dc:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <lora_tx_task_cnt>
 4e0:	08 95       	ret
 4e2:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <lora_para_index>
 4e6:	e8 2f       	mov	r30, r24
 4e8:	f0 e0       	ldi	r31, 0x00	; 0
 4ea:	ed 55       	subi	r30, 0x5D	; 93
 4ec:	fe 4f       	sbci	r31, 0xFE	; 254
 4ee:	90 81       	ld	r25, Z
 4f0:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <spi_trn_data+0x1>
 4f4:	8f 5f       	subi	r24, 0xFF	; 255
 4f6:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <lora_para_index>
 4fa:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <lora_para_cnt>
 4fe:	81 50       	subi	r24, 0x01	; 1
 500:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <lora_para_cnt>
 504:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SX1272_Reg_Access_On>
 508:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <lora_para_cnt>
 50c:	81 11       	cpse	r24, r1
 50e:	34 c0       	rjmp	.+104    	; 0x578 <LoRa_Tx_Task_Poll+0x15a>
 510:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <lora_tx_task_cnt>
 514:	8f 5f       	subi	r24, 0xFF	; 255
 516:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <lora_tx_task_cnt>
 51a:	08 95       	ret
 51c:	e9 e4       	ldi	r30, 0x49	; 73
 51e:	f1 e0       	ldi	r31, 0x01	; 1
 520:	81 e8       	ldi	r24, 0x81	; 129
 522:	80 83       	st	Z, r24
 524:	83 e8       	ldi	r24, 0x83	; 131
 526:	81 83       	std	Z+1, r24	; 0x01
 528:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SX1272_Reg_Access_On>
 52c:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <lora_tx_task_cnt>
 530:	8f 5f       	subi	r24, 0xFF	; 255
 532:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <lora_tx_task_cnt>
 536:	08 95       	ret
 538:	e9 e4       	ldi	r30, 0x49	; 73
 53a:	f1 e0       	ldi	r31, 0x01	; 1
 53c:	82 e1       	ldi	r24, 0x12	; 18
 53e:	80 83       	st	Z, r24
 540:	11 82       	std	Z+1, r1	; 0x01
 542:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <spi_rec_data+0x1>
 546:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SX1272_Reg_Access_On>
 54a:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <lora_tx_task_cnt>
 54e:	8f 5f       	subi	r24, 0xFF	; 255
 550:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <lora_tx_task_cnt>
 554:	08 95       	ret
 556:	e0 e8       	ldi	r30, 0x80	; 128
 558:	f1 e0       	ldi	r31, 0x01	; 1
 55a:	81 81       	ldd	r24, Z+1	; 0x01
 55c:	88 70       	andi	r24, 0x08	; 8
 55e:	81 83       	std	Z+1, r24	; 0x01
 560:	81 11       	cpse	r24, r1
 562:	04 c0       	rjmp	.+8      	; 0x56c <LoRa_Tx_Task_Poll+0x14e>
 564:	84 e0       	ldi	r24, 0x04	; 4
 566:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <lora_tx_task_cnt>
 56a:	08 95       	ret
 56c:	86 e0       	ldi	r24, 0x06	; 6
 56e:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <lora_tx_task_cnt>
 572:	9e 7f       	andi	r25, 0xFE	; 254
 574:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <lora_task_flag>
 578:	08 95       	ret

0000057a <SX1272_SPI_Loop>:

// SPI transmit loop.
void SX1272_SPI_Loop( void )
{
	// Task loop.
	temp2 = 0x01;
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <temp2>
	while( temp2 ){
		SPI_Task();
 580:	0e 94 42 03 	call	0x684	; 0x684 <SPI_Task>
		temp2 = spi_status_flag;
		temp2 &= 0x01;
 584:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <spi_status_flag>
 588:	81 70       	andi	r24, 0x01	; 1
 58a:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <temp2>
// SPI transmit loop.
void SX1272_SPI_Loop( void )
{
	// Task loop.
	temp2 = 0x01;
	while( temp2 ){
 58e:	81 11       	cpse	r24, r1
 590:	f7 cf       	rjmp	.-18     	; 0x580 <SX1272_SPI_Loop+0x6>
		SPI_Task();
		temp2 = spi_status_flag;
		temp2 &= 0x01;
	}	
}
 592:	08 95       	ret

00000594 <SX1272_Reg_Access>:
}

// Single register access.
void SX1272_Reg_Access( void )
{
	spi_trn_ptr = spi_trn_data;		// Output data pointer.
 594:	89 e4       	ldi	r24, 0x49	; 73
 596:	91 e0       	ldi	r25, 0x01	; 1
 598:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <spi_trn_ptr+0x1>
 59c:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <spi_trn_ptr>
	spi_rec_ptr = spi_rec_data;     // Received data pointer.
 5a0:	80 e8       	ldi	r24, 0x80	; 128
 5a2:	91 e0       	ldi	r25, 0x01	; 1
 5a4:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <spi_rec_ptr+0x1>
 5a8:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <spi_rec_ptr>
	spi_data_cnt = 2;				// 2 byte data.
 5ac:	82 e0       	ldi	r24, 0x02	; 2
 5ae:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <spi_data_cnt>
	SPI_Trigger_On();				// SPI on.
 5b2:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <SPI_Trigger_On>
	SX1272_SPI_Loop();				// SPI loop.
 5b6:	0e 94 bd 02 	call	0x57a	; 0x57a <SX1272_SPI_Loop>
 5ba:	08 95       	ret

000005bc <LoRa_RF_Init>:
	0x81, 0x85  // RX on.
};

// LoRa RF initialize.
void LoRa_RF_Init( void )
{
 5bc:	cf 93       	push	r28
 5be:	df 93       	push	r29
 5c0:	80 e0       	ldi	r24, 0x00	; 0
	temp3 = 0;
	// Set initialize register write data.
	while( temp3 < 38 ){			
		spi_trn_data[0] = RF_Init_Data[ temp3 ];
 5c2:	c9 e4       	ldi	r28, 0x49	; 73
 5c4:	d1 e0       	ldi	r29, 0x01	; 1
 5c6:	e8 2f       	mov	r30, r24
 5c8:	f0 e0       	ldi	r31, 0x00	; 0
 5ca:	e6 5f       	subi	r30, 0xF6	; 246
 5cc:	fe 4f       	sbci	r31, 0xFE	; 254
 5ce:	90 81       	ld	r25, Z
 5d0:	98 83       	st	Y, r25
		++temp3;
 5d2:	e1 e0       	ldi	r30, 0x01	; 1
 5d4:	e8 0f       	add	r30, r24
		spi_trn_data[1] = RF_Init_Data[ temp3 ];
 5d6:	f0 e0       	ldi	r31, 0x00	; 0
 5d8:	e6 5f       	subi	r30, 0xF6	; 246
 5da:	fe 4f       	sbci	r31, 0xFE	; 254
 5dc:	90 81       	ld	r25, Z
 5de:	99 83       	std	Y+1, r25	; 0x01
		++temp3;
 5e0:	8e 5f       	subi	r24, 0xFE	; 254
 5e2:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <temp3>
		SX1272_Reg_Access();					
 5e6:	0e 94 ca 02 	call	0x594	; 0x594 <SX1272_Reg_Access>
// LoRa RF initialize.
void LoRa_RF_Init( void )
{
	temp3 = 0;
	// Set initialize register write data.
	while( temp3 < 38 ){			
 5ea:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <temp3>
 5ee:	86 32       	cpi	r24, 0x26	; 38
 5f0:	50 f3       	brcs	.-44     	; 0x5c6 <LoRa_RF_Init+0xa>
		++temp3;
		spi_trn_data[1] = RF_Init_Data[ temp3 ];
		++temp3;
		SX1272_Reg_Access();					
	}
}
 5f2:	df 91       	pop	r29
 5f4:	cf 91       	pop	r28
 5f6:	08 95       	ret

000005f8 <main>:
};

int main(void)
{
	// System clock prescaler 1.
	CLKPR = 0x80;  // Enable.
 5f8:	e1 e6       	ldi	r30, 0x61	; 97
 5fa:	f0 e0       	ldi	r31, 0x00	; 0
 5fc:	80 e8       	ldi	r24, 0x80	; 128
 5fe:	80 83       	st	Z, r24
	CLKPR = 0x00;  // Write value.
 600:	10 82       	st	Z, r1
		
	// IO initialize.
	IO_Init();
 602:	0e 94 dd 01 	call	0x3ba	; 0x3ba <IO_Init>
	// ADC initialize.
	ADC_Init();
 606:	0e 94 ca 00 	call	0x194	; 0x194 <ADC_Init>
	// SPI initialize.
	SPI_Init();
 60a:	0e 94 36 03 	call	0x66c	; 0x66c <SPI_Init>
	// TWI initialize.
	TWI1_Init();
 60e:	0e 94 b0 03 	call	0x760	; 0x760 <TWI1_Init>
	// Timer #0 initialize.
	Timer0_Init();
 612:	0e 94 9a 03 	call	0x734	; 0x734 <Timer0_Init>
	// Enable global interrupt.
	sei();
 616:	78 94       	sei
	
	// Power on / Reset hold delay for SX1272.
	// About 30ms.
	delay_cnt = 3;
 618:	83 e0       	ldi	r24, 0x03	; 3
 61a:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <delay_cnt>
	while( delay_cnt ){
		Timer0_Task();
 61e:	0e 94 a1 03 	call	0x742	; 0x742 <Timer0_Task>
	sei();
	
	// Power on / Reset hold delay for SX1272.
	// About 30ms.
	delay_cnt = 3;
	while( delay_cnt ){
 622:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <delay_cnt>
 626:	81 11       	cpse	r24, r1
 628:	fa cf       	rjmp	.-12     	; 0x61e <main+0x26>
		Timer0_Task();
	}
	
	// SX1272 reset off.	
	SX1272_Reset_Off();
 62a:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <SX1272_Reset_Off>

	// Reset delay for SX1272.
	// About 50ms.
	delay_cnt = 5;
 62e:	85 e0       	ldi	r24, 0x05	; 5
 630:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <delay_cnt>
	while( delay_cnt ){
		Timer0_Task();
 634:	0e 94 a1 03 	call	0x742	; 0x742 <Timer0_Task>
	SX1272_Reset_Off();

	// Reset delay for SX1272.
	// About 50ms.
	delay_cnt = 5;
	while( delay_cnt ){
 638:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <delay_cnt>
 63c:	81 11       	cpse	r24, r1
 63e:	fa cf       	rjmp	.-12     	; 0x634 <main+0x3c>
		Timer0_Task();
	}
		
	// SX1272 RF initialize.
	LoRa_RF_Init();
 640:	0e 94 de 02 	call	0x5bc	; 0x5bc <LoRa_RF_Init>
	
	// Data reset.
	// - TX data.
	temp1 = 0;
	if( temp1 < 10 ){
		rf_tx_data[temp1] = 0;
 644:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <rf_tx_data>
		++temp1;
 648:	81 e0       	ldi	r24, 0x01	; 1
 64a:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <temp1>
	}
	// - TX task count.
	lora_tx_task_cnt = 0;
 64e:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <lora_tx_task_cnt>
		
	while (1)
	{
		// Timer #0 task.
		Timer0_Task();
 652:	0e 94 a1 03 	call	0x742	; 0x742 <Timer0_Task>
		// ADC task.
		ADC_Task();
 656:	0e 94 da 00 	call	0x1b4	; 0x1b4 <ADC_Task>
		// TWI task.
		TWI1_Task();		
 65a:	0e 94 c6 03 	call	0x78c	; 0x78c <TWI1_Task>
		// SPI task.
		SPI_Task();		
 65e:	0e 94 42 03 	call	0x684	; 0x684 <SPI_Task>
		// LoRa task.
		LoRa_Tx_Task_Poll();
 662:	0e 94 0f 02 	call	0x41e	; 0x41e <LoRa_Tx_Task_Poll>
		// Peripheral devices task dispatch.
		Device_Task();
 666:	0e 94 ee 00 	call	0x1dc	; 0x1dc <Device_Task>
	}
 66a:	f3 cf       	rjmp	.-26     	; 0x652 <main+0x5a>

0000066c <SPI_Init>:
	// SPI #1.
	// - MSB first.
	// - SCK = fosc/128.
	// CPOL = 0, CPHA = 0.
	// - Master mode.
	SPCR1 = 0x13;	
 66c:	ec ea       	ldi	r30, 0xAC	; 172
 66e:	f0 e0       	ldi	r31, 0x00	; 0
 670:	83 e1       	ldi	r24, 0x13	; 19
 672:	80 83       	st	Z, r24
	// SPI #1 enable.
	SPCR1 |= 0x40;
 674:	80 81       	ld	r24, Z
 676:	80 64       	ori	r24, 0x40	; 64
 678:	80 83       	st	Z, r24
	
	// For clear interrupt flag bit.
	temp1 = SPDR1;
 67a:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 67e:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <temp1>
 682:	08 95       	ret

00000684 <SPI_Task>:

// SPI task.
void SPI_Task( void )
{
	// Check interrupt flag bit.
	temp1 = SPSR1;
 684:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
	temp1 &= 0x80;	
 688:	80 78       	andi	r24, 0x80	; 128
 68a:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <temp1>
	if( temp1 == 0 ){
 68e:	88 23       	and	r24, r24
 690:	81 f1       	breq	.+96     	; 0x6f2 <SPI_Task+0x6e>
		return;
	}
	// Hold received data and clear interrupt flag bit.
	*spi_rec_ptr = SPDR1;
 692:	e0 91 b4 01 	lds	r30, 0x01B4	; 0x8001b4 <spi_rec_ptr>
 696:	f0 91 b5 01 	lds	r31, 0x01B5	; 0x8001b5 <spi_rec_ptr+0x1>
 69a:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 69e:	80 83       	st	Z, r24
	++spi_rec_ptr;
 6a0:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <spi_rec_ptr>
 6a4:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <spi_rec_ptr+0x1>
 6a8:	01 96       	adiw	r24, 0x01	; 1
 6aa:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <spi_rec_ptr+0x1>
 6ae:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <spi_rec_ptr>
	// Check data count.
	if( spi_data_cnt  ){
 6b2:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <spi_data_cnt>
 6b6:	88 23       	and	r24, r24
 6b8:	b1 f0       	breq	.+44     	; 0x6e6 <SPI_Task+0x62>
		
		// Transmit data.
		SPDR1 = *spi_trn_ptr;		
 6ba:	e0 91 a0 01 	lds	r30, 0x01A0	; 0x8001a0 <spi_trn_ptr>
 6be:	f0 91 a1 01 	lds	r31, 0x01A1	; 0x8001a1 <spi_trn_ptr+0x1>
 6c2:	80 81       	ld	r24, Z
 6c4:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
		// for next data.
		++spi_trn_ptr;
 6c8:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <spi_trn_ptr>
 6cc:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <spi_trn_ptr+0x1>
 6d0:	01 96       	adiw	r24, 0x01	; 1
 6d2:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <spi_trn_ptr+0x1>
 6d6:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <spi_trn_ptr>
		--spi_data_cnt;
 6da:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <spi_data_cnt>
 6de:	81 50       	subi	r24, 0x01	; 1
 6e0:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <spi_data_cnt>
		return;
 6e4:	08 95       	ret
	}
	// SS output inactive.
	PORTE |= 0x04;
 6e6:	72 9a       	sbi	0x0e, 2	; 14
	// Clear busy bit.
	spi_status_flag &= 0xfe;	
 6e8:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <spi_status_flag>
 6ec:	8e 7f       	andi	r24, 0xFE	; 254
 6ee:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <spi_status_flag>
 6f2:	08 95       	ret

000006f4 <SPI_Trigger_On>:

// SPI trigger on.
void SPI_Trigger_On( void )
{
	// Set busy flag bit.
	spi_status_flag |= 0x01;
 6f4:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <spi_status_flag>
 6f8:	81 60       	ori	r24, 0x01	; 1
 6fa:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <spi_status_flag>
	// SS output active.
	PORTE &= 0xfb;
 6fe:	72 98       	cbi	0x0e, 2	; 14
	// Assign pointer to data array.
	//spi_rec_ptr = spi_rec_data;
	//spi_trn_ptr = spi_trn_data;
	// First byte output.
	// Check data count.
	if( spi_data_cnt  ){		
 700:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <spi_data_cnt>
 704:	88 23       	and	r24, r24
 706:	a9 f0       	breq	.+42     	; 0x732 <SPI_Trigger_On+0x3e>
		// Transmit data.
		SPDR1 = *spi_trn_ptr;
 708:	e0 91 a0 01 	lds	r30, 0x01A0	; 0x8001a0 <spi_trn_ptr>
 70c:	f0 91 a1 01 	lds	r31, 0x01A1	; 0x8001a1 <spi_trn_ptr+0x1>
 710:	80 81       	ld	r24, Z
 712:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
		// for next data.
		++spi_trn_ptr;
 716:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <spi_trn_ptr>
 71a:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <spi_trn_ptr+0x1>
 71e:	01 96       	adiw	r24, 0x01	; 1
 720:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <spi_trn_ptr+0x1>
 724:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <spi_trn_ptr>
		--spi_data_cnt;
 728:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <spi_data_cnt>
 72c:	81 50       	subi	r24, 0x01	; 1
 72e:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <spi_data_cnt>
 732:	08 95       	ret

00000734 <Timer0_Init>:
{
	// 8MHz oscillator, 0.125us * 1024 = 128us.
	// period, 128us * 256 = 32.768 ms.	
	
	// CTC mode, no output.
	TCCR0A = 0x02;
 734:	82 e0       	ldi	r24, 0x02	; 2
 736:	84 bd       	out	0x24, r24	; 36
	// Prescaler 1024.
	TCCR0B = 0x05; 
 738:	85 e0       	ldi	r24, 0x05	; 5
 73a:	85 bd       	out	0x25, r24	; 37
	// comparator A.
	// - 10ms / 256us = 38.
	OCR0A = 39;
 73c:	87 e2       	ldi	r24, 0x27	; 39
 73e:	87 bd       	out	0x27, r24	; 39
 740:	08 95       	ret

00000742 <Timer0_Task>:

// Timer #0 task.
void Timer0_Task( void )
{
	// Check interrupt flag bit. 
	temp1 = TIFR0;
 742:	85 b3       	in	r24, 0x15	; 21
	temp1 &= 0x02;
 744:	82 70       	andi	r24, 0x02	; 2
 746:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <temp1>
	if( temp1 == 0 ){
 74a:	88 23       	and	r24, r24
 74c:	41 f0       	breq	.+16     	; 0x75e <Timer0_Task+0x1c>
		return;
	}
	// About 10ms past.
	// Clear flag bit.
	TIFR0 |= 0x02;	
 74e:	a9 9a       	sbi	0x15, 1	; 21
	
	// Delay count.
	if( delay_cnt ){
 750:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <delay_cnt>
 754:	88 23       	and	r24, r24
 756:	19 f0       	breq	.+6      	; 0x75e <Timer0_Task+0x1c>
		--delay_cnt;
 758:	81 50       	subi	r24, 0x01	; 1
 75a:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <delay_cnt>
 75e:	08 95       	ret

00000760 <TWI1_Init>:
// TWI #1 initialize.
void TWI1_Init( void )
{
	//TWI ( I2C also ).
	// - 100KHz @ 8MHz.
	TWBR1 = 32;
 760:	80 e2       	ldi	r24, 0x20	; 32
 762:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 766:	08 95       	ret

00000768 <TWI1_On_Write>:

// TWI #1 write task trigger on.
void TWI1_On_Write( void )
{
	// Set busy flag bit.
	twi1_task_status |= 0x01;
 768:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <twi1_task_status>
 76c:	81 60       	ori	r24, 0x01	; 1
 76e:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <twi1_task_status>
	// Send start condition.
	TWCR1 = 0xa4;	
 772:	84 ea       	ldi	r24, 0xA4	; 164
 774:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
 778:	08 95       	ret

0000077a <TWI1_On_Read>:

// TWI #1 read task trigger on.
void TWI1_On_Read( void )
{
	// Set busy flag bit.
	twi1_task_status |= 0x01;	
 77a:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <twi1_task_status>
 77e:	81 60       	ori	r24, 0x01	; 1
 780:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <twi1_task_status>
	// Send start condition.
	TWCR1 = 0xa4;	
 784:	84 ea       	ldi	r24, 0xA4	; 164
 786:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
 78a:	08 95       	ret

0000078c <TWI1_Task>:

// TWI #1 task.
void TWI1_Task( void )
{
	// Check interrupt flag.
	temp1 = TWCR1;
 78c:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
	temp1 &= 0x80;
 790:	80 78       	andi	r24, 0x80	; 128
 792:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <temp1>
	if( temp1 == 0x00 ){
 796:	88 23       	and	r24, r24
 798:	09 f4       	brne	.+2      	; 0x79c <TWI1_Task+0x10>
 79a:	69 c0       	rjmp	.+210    	; 0x86e <TWI1_Task+0xe2>
	}
	// Clear flag bit.
	//TWCR |= 0x80;
	
	// Get status code.
	temp1 = TWSR1;
 79c:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	temp1 &= 0xf8;
 7a0:	e8 2f       	mov	r30, r24
 7a2:	e8 7f       	andi	r30, 0xF8	; 248
 7a4:	e0 93 73 01 	sts	0x0173, r30	; 0x800173 <temp1>
	
	switch( temp1 ){
 7a8:	8e 2f       	mov	r24, r30
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	fc 01       	movw	r30, r24
 7ae:	38 97       	sbiw	r30, 0x08	; 8
 7b0:	e1 35       	cpi	r30, 0x51	; 81
 7b2:	f1 05       	cpc	r31, r1
 7b4:	08 f0       	brcs	.+2      	; 0x7b8 <TWI1_Task+0x2c>
 7b6:	5b c0       	rjmp	.+182    	; 0x86e <TWI1_Task+0xe2>
 7b8:	e6 5a       	subi	r30, 0xA6	; 166
 7ba:	ff 4f       	sbci	r31, 0xFF	; 255
 7bc:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__tablejump2__>
		// Master receiver mode, master NACK send.
		case 0x58:
		// Master receiver mode, master ACK send.
		case 0x50:
		// Hold shifter data.
		twi1_data[ twi1_data_index ] = TWDR1;
 7c0:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <twi1_data_index>
 7c4:	90 91 db 00 	lds	r25, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
 7c8:	e8 2f       	mov	r30, r24
 7ca:	f0 e0       	ldi	r31, 0x00	; 0
 7cc:	ec 58       	subi	r30, 0x8C	; 140
 7ce:	fe 4f       	sbci	r31, 0xFE	; 254
 7d0:	90 83       	st	Z, r25
		// Next byte data.
		++twi1_data_index;
 7d2:	8f 5f       	subi	r24, 0xFF	; 255
 7d4:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <twi1_data_index>
		--twi1_data_cnt;
 7d8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <twi1_data_cnt>
 7dc:	81 50       	subi	r24, 0x01	; 1
 7de:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <twi1_data_cnt>
		// SLA + R send, received ACK.
		case 0x40:
		// Last byte received.
		if( twi1_data_cnt == 1 ){
 7e2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <twi1_data_cnt>
 7e6:	81 30       	cpi	r24, 0x01	; 1
 7e8:	21 f4       	brne	.+8      	; 0x7f2 <TWI1_Task+0x66>
			// Last data will receive.
			// Prepare receive first byte data.
			// 1.) Clear interrupt flag.
			// 2.) Received data and return NACK.
			// 3.) Trigger on.
			TWCR1 = 0x84;
 7ea:	84 e8       	ldi	r24, 0x84	; 132
 7ec:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
 7f0:	08 95       	ret
		}
		// No more data received, output stop condition.
		else if( twi1_data_cnt == 0 ){
 7f2:	81 11       	cpse	r24, r1
 7f4:	09 c0       	rjmp	.+18     	; 0x808 <TWI1_Task+0x7c>
			// Stop condition out.
			// 1.) Clear interrupt flag,
			// 2.) stop condition,
			// 3.) trigger on TWI.
			TWCR1 = 0x94;
 7f6:	84 e9       	ldi	r24, 0x94	; 148
 7f8:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
			// Clear flag bit.
			twi1_task_status &= 0xfe;
 7fc:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <twi1_task_status>
 800:	8e 7f       	andi	r24, 0xFE	; 254
 802:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <twi1_task_status>
 806:	08 95       	ret
		}
		else{
			// 1.) Clear interrupt flag.
			// 2.) Received data and return ACK.
			// 3.) Trigger on.
			TWCR1 = 0xC4;
 808:	84 ec       	ldi	r24, 0xC4	; 196
 80a:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
 80e:	08 95       	ret
		
		// Master transmitter mode, master SLA+W send NACK received.
		case 0x20:
		// Master transmitter mode, master data send, NACK received.
		case 0x30:
		twi1_data_cnt = 0;
 810:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <twi1_data_cnt>
 814:	04 c0       	rjmp	.+8      	; 0x81e <TWI1_Task+0x92>
		// Master transmitter mode, master data send, NACK received.
		case 0x28:
		// Master transmitter mode, master master SLA+W send ACK received.
		case 0x18:
		// No more data send, send stop condition.
		if( twi1_data_cnt == 0 ){
 816:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <twi1_data_cnt>
 81a:	81 11       	cpse	r24, r1
 81c:	09 c0       	rjmp	.+18     	; 0x830 <TWI1_Task+0xa4>
			// Stop condition out.
			// 1.) Clear interrupt flag,
			// 2.) stop condition,
			// 3.) trigger on TWI.
			TWCR1 = 0x94;
 81e:	84 e9       	ldi	r24, 0x94	; 148
 820:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
			// Clear flag bit.
			twi1_task_status &= 0xfe;
 824:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <twi1_task_status>
 828:	8e 7f       	andi	r24, 0xFE	; 254
 82a:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <twi1_task_status>
			return;
 82e:	08 95       	ret
		}
		// Send data.
		TWDR1 = twi1_data[ twi1_data_index ];
 830:	e0 91 b1 01 	lds	r30, 0x01B1	; 0x8001b1 <twi1_data_index>
 834:	f0 e0       	ldi	r31, 0x00	; 0
 836:	ec 58       	subi	r30, 0x8C	; 140
 838:	fe 4f       	sbci	r31, 0xFE	; 254
 83a:	80 81       	ld	r24, Z
 83c:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
		// 1.) Clear interrupt flag,
		// 2.) and trigger on.
		TWCR1 = 0x84;
 840:	84 e8       	ldi	r24, 0x84	; 132
 842:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
		// Next data.
		--twi1_data_cnt;
 846:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <twi1_data_cnt>
 84a:	81 50       	subi	r24, 0x01	; 1
 84c:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <twi1_data_cnt>
		++twi1_data_index;
 850:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <twi1_data_index>
 854:	8f 5f       	subi	r24, 0xFF	; 255
 856:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <twi1_data_index>
		break;
 85a:	08 95       	ret
		
		// Start condition done.
		case 0x08:
		// Send SLA + W or SLA + R.
		TWDR1 = twi1_addr;
 85c:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <twi1_addr>
 860:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
		// 1.) Clear interrupt flag,
		// 2.) and trigger on.
		TWCR1 = 0x84;
 864:	84 e8       	ldi	r24, 0x84	; 132
 866:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
		// Clear data index.
		twi1_data_index = 0;
 86a:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <twi1_data_index>
 86e:	08 95       	ret

00000870 <__udivmodsi4>:
 870:	a1 e2       	ldi	r26, 0x21	; 33
 872:	1a 2e       	mov	r1, r26
 874:	aa 1b       	sub	r26, r26
 876:	bb 1b       	sub	r27, r27
 878:	fd 01       	movw	r30, r26
 87a:	0d c0       	rjmp	.+26     	; 0x896 <__udivmodsi4_ep>

0000087c <__udivmodsi4_loop>:
 87c:	aa 1f       	adc	r26, r26
 87e:	bb 1f       	adc	r27, r27
 880:	ee 1f       	adc	r30, r30
 882:	ff 1f       	adc	r31, r31
 884:	a2 17       	cp	r26, r18
 886:	b3 07       	cpc	r27, r19
 888:	e4 07       	cpc	r30, r20
 88a:	f5 07       	cpc	r31, r21
 88c:	20 f0       	brcs	.+8      	; 0x896 <__udivmodsi4_ep>
 88e:	a2 1b       	sub	r26, r18
 890:	b3 0b       	sbc	r27, r19
 892:	e4 0b       	sbc	r30, r20
 894:	f5 0b       	sbc	r31, r21

00000896 <__udivmodsi4_ep>:
 896:	66 1f       	adc	r22, r22
 898:	77 1f       	adc	r23, r23
 89a:	88 1f       	adc	r24, r24
 89c:	99 1f       	adc	r25, r25
 89e:	1a 94       	dec	r1
 8a0:	69 f7       	brne	.-38     	; 0x87c <__udivmodsi4_loop>
 8a2:	60 95       	com	r22
 8a4:	70 95       	com	r23
 8a6:	80 95       	com	r24
 8a8:	90 95       	com	r25
 8aa:	9b 01       	movw	r18, r22
 8ac:	ac 01       	movw	r20, r24
 8ae:	bd 01       	movw	r22, r26
 8b0:	cf 01       	movw	r24, r30
 8b2:	08 95       	ret

000008b4 <__tablejump2__>:
 8b4:	ee 0f       	add	r30, r30
 8b6:	ff 1f       	adc	r31, r31
 8b8:	05 90       	lpm	r0, Z+
 8ba:	f4 91       	lpm	r31, Z
 8bc:	e0 2d       	mov	r30, r0
 8be:	09 94       	ijmp

000008c0 <__muluhisi3>:
 8c0:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <__umulhisi3>
 8c4:	a5 9f       	mul	r26, r21
 8c6:	90 0d       	add	r25, r0
 8c8:	b4 9f       	mul	r27, r20
 8ca:	90 0d       	add	r25, r0
 8cc:	a4 9f       	mul	r26, r20
 8ce:	80 0d       	add	r24, r0
 8d0:	91 1d       	adc	r25, r1
 8d2:	11 24       	eor	r1, r1
 8d4:	08 95       	ret

000008d6 <__umulhisi3>:
 8d6:	a2 9f       	mul	r26, r18
 8d8:	b0 01       	movw	r22, r0
 8da:	b3 9f       	mul	r27, r19
 8dc:	c0 01       	movw	r24, r0
 8de:	a3 9f       	mul	r26, r19
 8e0:	70 0d       	add	r23, r0
 8e2:	81 1d       	adc	r24, r1
 8e4:	11 24       	eor	r1, r1
 8e6:	91 1d       	adc	r25, r1
 8e8:	b2 9f       	mul	r27, r18
 8ea:	70 0d       	add	r23, r0
 8ec:	81 1d       	adc	r24, r1
 8ee:	11 24       	eor	r1, r1
 8f0:	91 1d       	adc	r25, r1
 8f2:	08 95       	ret

000008f4 <_exit>:
 8f4:	f8 94       	cli

000008f6 <__stop_program>:
 8f6:	ff cf       	rjmp	.-2      	; 0x8f6 <__stop_program>
