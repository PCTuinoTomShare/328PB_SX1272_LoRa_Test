
LoRa_TX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  0000094c  00000a00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000094c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000082  00800136  00800136  00000a36  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00000a36  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00000a39  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a6c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000001d8  00000000  00000000  00000aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001f45  00000000  00000000  00000c84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000577  00000000  00000000  00002bc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000107a  00000000  00000000  00003140  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002ec  00000000  00000000  000041bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000054a  00000000  00000000  000044a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000000c1  00000000  00000000  000049f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000148  00000000  00000000  00004ab3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__ctors_end>
   4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  40:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  4c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  68:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  6c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  70:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  74:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  78:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  7c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  80:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  84:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  88:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  8c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  90:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  94:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  98:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  9c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  ac:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b4:	4e 04       	cpc	r4, r14
  b6:	0d 04       	cpc	r0, r13
  b8:	ff 03       	fmulsu	r23, r23
  ba:	61 04       	cpc	r6, r1
  bc:	61 04       	cpc	r6, r1
  be:	4e 04       	cpc	r4, r14
  c0:	c1 03       	fmuls	r20, r17
  c2:	d7 03       	fmuls	r21, r23
  c4:	f7 03       	fmuls	r23, r23
  c6:	61 04       	cpc	r6, r1
  c8:	4e 04       	cpc	r4, r14
  ca:	ab 03       	fmulsu	r18, r19
  cc:	b8 03       	fmulsu	r19, r16
  ce:	49 04       	cpc	r4, r9
  d0:	c1 03       	fmuls	r20, r17
  d2:	d7 03       	fmuls	r21, r23
  d4:	f7 03       	fmuls	r23, r23
  d6:	61 04       	cpc	r6, r1
  d8:	4e 04       	cpc	r4, r14
  da:	3b 04       	cpc	r3, r11

000000dc <__ctors_end>:
  dc:	11 24       	eor	r1, r1
  de:	1f be       	out	0x3f, r1	; 63
  e0:	cf ef       	ldi	r28, 0xFF	; 255
  e2:	d8 e0       	ldi	r29, 0x08	; 8
  e4:	de bf       	out	0x3e, r29	; 62
  e6:	cd bf       	out	0x3d, r28	; 61

000000e8 <__do_copy_data>:
  e8:	11 e0       	ldi	r17, 0x01	; 1
  ea:	a0 e0       	ldi	r26, 0x00	; 0
  ec:	b1 e0       	ldi	r27, 0x01	; 1
  ee:	ec e4       	ldi	r30, 0x4C	; 76
  f0:	f9 e0       	ldi	r31, 0x09	; 9
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <__do_copy_data+0x10>
  f4:	05 90       	lpm	r0, Z+
  f6:	0d 92       	st	X+, r0
  f8:	a6 33       	cpi	r26, 0x36	; 54
  fa:	b1 07       	cpc	r27, r17
  fc:	d9 f7       	brne	.-10     	; 0xf4 <__do_copy_data+0xc>

000000fe <__do_clear_bss>:
  fe:	21 e0       	ldi	r18, 0x01	; 1
 100:	a6 e3       	ldi	r26, 0x36	; 54
 102:	b1 e0       	ldi	r27, 0x01	; 1
 104:	01 c0       	rjmp	.+2      	; 0x108 <.do_clear_bss_start>

00000106 <.do_clear_bss_loop>:
 106:	1d 92       	st	X+, r1

00000108 <.do_clear_bss_start>:
 108:	a8 3b       	cpi	r26, 0xB8	; 184
 10a:	b2 07       	cpc	r27, r18
 10c:	e1 f7       	brne	.-8      	; 0x106 <.do_clear_bss_loop>
 10e:	0e 94 c0 02 	call	0x580	; 0x580 <main>
 112:	0c 94 a4 04 	jmp	0x948	; 0x948 <_exit>

00000116 <__bad_interrupt>:
 116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <ADC_Init>:
void ADC_Init( void )
{
	// Reference on VACC.
	// Data right align.
	// ADC5.
	ADMUX = 0x65;
 11a:	85 e6       	ldi	r24, 0x65	; 101
 11c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// Power reduction ADC off, for ADC.
	PRR0 &= 0xfe;
 120:	e4 e6       	ldi	r30, 0x64	; 100
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	8e 7f       	andi	r24, 0xFE	; 254
 128:	80 83       	st	Z, r24
	// Single conversion ( no auto trigger ). 
	// Clock division 128.
	ADCSRA = 0x97;
 12a:	ea e7       	ldi	r30, 0x7A	; 122
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	87 e9       	ldi	r24, 0x97	; 151
 130:	80 83       	st	Z, r24
	// Start conversion.
	ADCSRA |= 0x40;	
 132:	80 81       	ld	r24, Z
 134:	80 64       	ori	r24, 0x40	; 64
 136:	80 83       	st	Z, r24
 138:	08 95       	ret

0000013a <ADC_Task>:

// ADC task.
void ADC_Task( void )
{
	// ADC interrupt flag bit check.
	temp1 = ADCSRA;
 13a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	temp1 &= 0x10;
 13e:	80 71       	andi	r24, 0x10	; 16
 140:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <temp1>
	if( temp1 == 0 ){
 144:	88 23       	and	r24, r24
 146:	61 f0       	breq	.+24     	; 0x160 <ADC_Task+0x26>
		return;
	}
	// Clear flag bit.
	ADCSRA |= 0x10;
 148:	ea e7       	ldi	r30, 0x7A	; 122
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	80 61       	ori	r24, 0x10	; 16
 150:	80 83       	st	Z, r24
	// Keep ADC value.
	adc_value = ADCH;	
 152:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 156:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <adc_value>
	// Start conversion.
	ADCSRA |= 0x40;	
 15a:	80 81       	ld	r24, Z
 15c:	80 64       	ori	r24, 0x40	; 64
 15e:	80 83       	st	Z, r24
 160:	08 95       	ret

00000162 <Device_Task>:
#include "HIH6130.h"
#include "Lora_Task.h"
#include "var.h"

// device task.
void Device_Task( void ){
 162:	cf 92       	push	r12
 164:	df 92       	push	r13
 166:	ef 92       	push	r14
 168:	ff 92       	push	r15
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
	
	// check delay counter.
	if( delay_cnt ){
 16e:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <delay_cnt>
 172:	81 11       	cpse	r24, r1
 174:	cd c0       	rjmp	.+410    	; 0x310 <Device_Task+0x1ae>
		return;
	}
		
	// TWI task busy check.
	temp1 = twi1_task_status;
	temp1 &= 0x01;
 176:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <twi1_task_status>
 17a:	81 70       	andi	r24, 0x01	; 1
 17c:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <temp1>
	if( temp1 ){
 180:	81 11       	cpse	r24, r1
 182:	c6 c0       	rjmp	.+396    	; 0x310 <Device_Task+0x1ae>
		// Still busy.
		return;
	}
	
	// Check LoRa TX busy bit.
	temp1 = lora_task_flag;
 184:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <lora_task_flag>
	temp1 &= 0x01;
 188:	89 2f       	mov	r24, r25
 18a:	81 70       	andi	r24, 0x01	; 1
 18c:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <temp1>
	if( temp1 ){
 190:	81 11       	cpse	r24, r1
 192:	be c0       	rjmp	.+380    	; 0x310 <Device_Task+0x1ae>
		return;
	}
			
	switch( dev_task_cnt ){
 194:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <dev_task_cnt>
 198:	82 30       	cpi	r24, 0x02	; 2
 19a:	01 f1       	breq	.+64     	; 0x1dc <Device_Task+0x7a>
 19c:	28 f4       	brcc	.+10     	; 0x1a8 <Device_Task+0x46>
 19e:	88 23       	and	r24, r24
 1a0:	51 f0       	breq	.+20     	; 0x1b6 <Device_Task+0x54>
 1a2:	81 30       	cpi	r24, 0x01	; 1
 1a4:	99 f0       	breq	.+38     	; 0x1cc <Device_Task+0x6a>
 1a6:	b4 c0       	rjmp	.+360    	; 0x310 <Device_Task+0x1ae>
 1a8:	83 30       	cpi	r24, 0x03	; 3
 1aa:	09 f4       	brne	.+2      	; 0x1ae <Device_Task+0x4c>
 1ac:	9b c0       	rjmp	.+310    	; 0x2e4 <Device_Task+0x182>
 1ae:	84 30       	cpi	r24, 0x04	; 4
 1b0:	09 f4       	brne	.+2      	; 0x1b4 <Device_Task+0x52>
 1b2:	a7 c0       	rjmp	.+334    	; 0x302 <Device_Task+0x1a0>
 1b4:	ad c0       	rjmp	.+346    	; 0x310 <Device_Task+0x1ae>
				
		case 0:
			// Start HIH6130 measurement.	
			HIHI6130_Measure_Request();
 1b6:	0e 94 8f 01 	call	0x31e	; 0x31e <HIHI6130_Measure_Request>
			// Next task.
			++dev_task_cnt;
 1ba:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <dev_task_cnt>
 1be:	8f 5f       	subi	r24, 0xFF	; 255
 1c0:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <dev_task_cnt>
			// Reset measurement delay count.
			// 100ms.
			delay_cnt = 10;
 1c4:	8a e0       	ldi	r24, 0x0A	; 10
 1c6:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <delay_cnt>
			break;
 1ca:	a2 c0       	rjmp	.+324    	; 0x310 <Device_Task+0x1ae>
					
		case 1:
			// Read measurement data.
			HIH6130_I2C_On_HT();
 1cc:	0e 94 98 01 	call	0x330	; 0x330 <HIH6130_I2C_On_HT>
			// Next task.
			++dev_task_cnt;			
 1d0:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <dev_task_cnt>
 1d4:	8f 5f       	subi	r24, 0xFF	; 255
 1d6:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <dev_task_cnt>
			break;
 1da:	9a c0       	rjmp	.+308    	; 0x310 <Device_Task+0x1ae>
		
		case 2:
			// Prepare TX data.
			// HIH6130 humidity.
			temp5 = twi1_data[0];
 1dc:	c4 e7       	ldi	r28, 0x74	; 116
 1de:	d1 e0       	ldi	r29, 0x01	; 1
 1e0:	28 81       	ld	r18, Y
 1e2:	82 2f       	mov	r24, r18
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	a0 e0       	ldi	r26, 0x00	; 0
 1e8:	b0 e0       	ldi	r27, 0x00	; 0
			temp5 <<= 8;
 1ea:	ba 2f       	mov	r27, r26
 1ec:	a9 2f       	mov	r26, r25
 1ee:	98 2f       	mov	r25, r24
 1f0:	88 27       	eor	r24, r24
			temp5 &= 0x3f00;
 1f2:	ac 01       	movw	r20, r24
 1f4:	bd 01       	movw	r22, r26
 1f6:	44 27       	eor	r20, r20
 1f8:	5f 73       	andi	r21, 0x3F	; 63
 1fa:	66 27       	eor	r22, r22
 1fc:	77 27       	eor	r23, r23
			temp5 |= twi1_data[1];		
 1fe:	89 81       	ldd	r24, Y+1	; 0x01
 200:	9a 01       	movw	r18, r20
 202:	ab 01       	movw	r20, r22
 204:	28 2b       	or	r18, r24
			temp5 *= 100;
 206:	a4 e6       	ldi	r26, 0x64	; 100
 208:	b0 e0       	ldi	r27, 0x00	; 0
 20a:	0e 94 8a 04 	call	0x914	; 0x914 <__muluhisi3>
			temp5 /= 16383;		
 20e:	0f 2e       	mov	r0, r31
 210:	cc 24       	eor	r12, r12
 212:	ca 94       	dec	r12
 214:	ff e3       	ldi	r31, 0x3F	; 63
 216:	df 2e       	mov	r13, r31
 218:	e1 2c       	mov	r14, r1
 21a:	f1 2c       	mov	r15, r1
 21c:	f0 2d       	mov	r31, r0
 21e:	a7 01       	movw	r20, r14
 220:	96 01       	movw	r18, r12
 222:	0e 94 62 04 	call	0x8c4	; 0x8c4 <__udivmodsi4>
			rf_tx_data[0] = (uint8_t)temp5;		
 226:	20 93 a3 01 	sts	0x01A3, r18	; 0x8001a3 <rf_tx_data>
			// HIH6130 temperature.
			temp5 = twi1_data[2];
 22a:	4a 81       	ldd	r20, Y+2	; 0x02
 22c:	50 e0       	ldi	r21, 0x00	; 0
 22e:	60 e0       	ldi	r22, 0x00	; 0
 230:	70 e0       	ldi	r23, 0x00	; 0
			temp5 <<= 8;
			temp5 &= 0xff00;
 232:	76 2f       	mov	r23, r22
 234:	65 2f       	mov	r22, r21
 236:	54 2f       	mov	r21, r20
 238:	44 27       	eor	r20, r20
			temp5 |= twi1_data[3];
 23a:	8b 81       	ldd	r24, Y+3	; 0x03
 23c:	48 2b       	or	r20, r24
			temp5 >>= 2;
 23e:	9a 01       	movw	r18, r20
 240:	ab 01       	movw	r20, r22
 242:	56 95       	lsr	r21
 244:	47 95       	ror	r20
 246:	37 95       	ror	r19
 248:	27 95       	ror	r18
 24a:	56 95       	lsr	r21
 24c:	47 95       	ror	r20
 24e:	37 95       	ror	r19
 250:	27 95       	ror	r18
			temp5 *= 165;
 252:	a5 ea       	ldi	r26, 0xA5	; 165
 254:	b0 e0       	ldi	r27, 0x00	; 0
 256:	0e 94 8a 04 	call	0x914	; 0x914 <__muluhisi3>
			temp5 /= 16383;		
 25a:	a7 01       	movw	r20, r14
 25c:	96 01       	movw	r18, r12
 25e:	0e 94 62 04 	call	0x8c4	; 0x8c4 <__udivmodsi4>
			temp1 = 0x00;		// Minus Sign.
 262:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <temp1>
			if( temp5 < 40 ){
 266:	28 32       	cpi	r18, 0x28	; 40
 268:	31 05       	cpc	r19, r1
 26a:	41 05       	cpc	r20, r1
 26c:	51 05       	cpc	r21, r1
 26e:	e0 f4       	brcc	.+56     	; 0x2a8 <Device_Task+0x146>
				temp6 = temp5;
 270:	20 93 6f 01 	sts	0x016F, r18	; 0x80016f <temp6>
 274:	30 93 70 01 	sts	0x0170, r19	; 0x800170 <temp6+0x1>
 278:	40 93 71 01 	sts	0x0171, r20	; 0x800171 <temp6+0x2>
 27c:	50 93 72 01 	sts	0x0172, r21	; 0x800172 <temp6+0x3>
				temp5 = 40;
				temp5 -= temp6;
 280:	88 e2       	ldi	r24, 0x28	; 40
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	a0 e0       	ldi	r26, 0x00	; 0
 286:	b0 e0       	ldi	r27, 0x00	; 0
 288:	82 1b       	sub	r24, r18
 28a:	93 0b       	sbc	r25, r19
 28c:	a4 0b       	sbc	r26, r20
 28e:	b5 0b       	sbc	r27, r21
 290:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <temp5>
 294:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <temp5+0x1>
 298:	a0 93 6b 01 	sts	0x016B, r26	; 0x80016b <temp5+0x2>
 29c:	b0 93 6c 01 	sts	0x016C, r27	; 0x80016c <temp5+0x3>
				temp1 = 0x80;
 2a0:	80 e8       	ldi	r24, 0x80	; 128
 2a2:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <temp1>
 2a6:	0d c0       	rjmp	.+26     	; 0x2c2 <Device_Task+0x160>
			}
			else{
				temp5 -= 40;
 2a8:	da 01       	movw	r26, r20
 2aa:	c9 01       	movw	r24, r18
 2ac:	88 97       	sbiw	r24, 0x28	; 40
 2ae:	a1 09       	sbc	r26, r1
 2b0:	b1 09       	sbc	r27, r1
 2b2:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <temp5>
 2b6:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <temp5+0x1>
 2ba:	a0 93 6b 01 	sts	0x016B, r26	; 0x80016b <temp5+0x2>
 2be:	b0 93 6c 01 	sts	0x016C, r27	; 0x80016c <temp5+0x3>
			}		
			rf_tx_data[1] = (uint8_t)temp5;
			rf_tx_data[1] |= temp1;
 2c2:	e3 ea       	ldi	r30, 0xA3	; 163
 2c4:	f1 e0       	ldi	r31, 0x01	; 1
 2c6:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <temp5>
 2ca:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <temp1>
 2ce:	89 2b       	or	r24, r25
 2d0:	81 83       	std	Z+1, r24	; 0x01
			// ADC data.
			rf_tx_data[2] = adc_value;
 2d2:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <adc_value>
 2d6:	82 83       	std	Z+2, r24	; 0x02
			// Next task.
			++dev_task_cnt;
 2d8:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <dev_task_cnt>
 2dc:	8f 5f       	subi	r24, 0xFF	; 255
 2de:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <dev_task_cnt>
			break;
 2e2:	16 c0       	rjmp	.+44     	; 0x310 <Device_Task+0x1ae>
				
		case 3:			
			// CRC.
			rf_tx_data[9] = rf_tx_data[0];
			rf_tx_data[9] += rf_tx_data[1];
			rf_tx_data[9] += rf_tx_data[2];
 2e4:	e3 ea       	ldi	r30, 0xA3	; 163
 2e6:	f1 e0       	ldi	r31, 0x01	; 1
			break;
				
		case 3:			
			// CRC.
			rf_tx_data[9] = rf_tx_data[0];
			rf_tx_data[9] += rf_tx_data[1];
 2e8:	91 81       	ldd	r25, Z+1	; 0x01
 2ea:	80 81       	ld	r24, Z
 2ec:	89 0f       	add	r24, r25
			rf_tx_data[9] += rf_tx_data[2];
 2ee:	92 81       	ldd	r25, Z+2	; 0x02
 2f0:	89 0f       	add	r24, r25
 2f2:	81 87       	std	Z+9, r24	; 0x09
			// 900ms delay.
			delay_cnt = 90;			
 2f4:	8a e5       	ldi	r24, 0x5A	; 90
 2f6:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <delay_cnt>
			// Next task.
			++dev_task_cnt;
 2fa:	84 e0       	ldi	r24, 0x04	; 4
 2fc:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <dev_task_cnt>
			break;
 300:	07 c0       	rjmp	.+14     	; 0x310 <Device_Task+0x1ae>
			
		case 4:
			// Start LoRa TX task.
			lora_task_flag |= 0x01;
 302:	91 60       	ori	r25, 0x01	; 1
 304:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <lora_task_flag>
			lora_tx_task_cnt = 0;			
 308:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <lora_tx_task_cnt>
			// Next task.
			dev_task_cnt = 0;
 30c:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <dev_task_cnt>
			break;	
	}
}
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	ff 90       	pop	r15
 316:	ef 90       	pop	r14
 318:	df 90       	pop	r13
 31a:	cf 90       	pop	r12
 31c:	08 95       	ret

0000031e <HIHI6130_Measure_Request>:

// Measurement request.
void HIHI6130_Measure_Request( void )
{
	// SLA.
    twi1_addr = HIH6130_WR;        
 31e:	8e e4       	ldi	r24, 0x4E	; 78
 320:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <twi1_addr>
    // Trigger on write task.
	TWI1_On_Write();
 324:	0e 94 78 03 	call	0x6f0	; 0x6f0 <TWI1_On_Write>
	// Set task count.
	twi1_task_cnt = 19;
 328:	83 e1       	ldi	r24, 0x13	; 19
 32a:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
 32e:	08 95       	ret

00000330 <HIH6130_I2C_On_HT>:

// Read humidity and temperature data.
void HIH6130_I2C_On_HT( void )
{	
	// SLA.
    twi1_addr = HIH6130_RD;        	
 330:	8f e4       	ldi	r24, 0x4F	; 79
 332:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <twi1_addr>
	// 4 byte to read.
	twi1_data_cnt = 4;
 336:	84 e0       	ldi	r24, 0x04	; 4
 338:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <twi1_data_cnt>
	// Trigger on read task.
	TWI1_On_Read();	
 33c:	0e 94 84 03 	call	0x708	; 0x708 <TWI1_On_Read>
 340:	08 95       	ret

00000342 <IO_Init>:
}

// Data LED off.
void IO_Data_LED_Off( void )
{
	PORTD &= 0xdf;	
 342:	8c e0       	ldi	r24, 0x0C	; 12
 344:	8d b9       	out	0x0d, r24	; 13
 346:	86 e0       	ldi	r24, 0x06	; 6
 348:	87 b9       	out	0x07, r24	; 7
 34a:	80 ee       	ldi	r24, 0xE0	; 224
 34c:	8a b9       	out	0x0a, r24	; 10
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	84 b9       	out	0x04, r24	; 4
 352:	72 9a       	sbi	0x0e, 2	; 14
 354:	42 9a       	sbi	0x08, 2	; 8
 356:	28 98       	cbi	0x05, 0	; 5
 358:	5f 9a       	sbi	0x0b, 7	; 11
 35a:	8b b1       	in	r24, 0x0b	; 11
 35c:	8f 79       	andi	r24, 0x9F	; 159
 35e:	8b b9       	out	0x0b, r24	; 11
 360:	08 95       	ret

00000362 <IO_Data_LED_Toggle>:
}

// Data LED toggle.
void IO_Data_LED_Toggle( void )
{
	temp1 = PORTD;
 362:	8b b1       	in	r24, 0x0b	; 11
	temp1 &= 0x20;	
 364:	80 72       	andi	r24, 0x20	; 32
 366:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <temp1>
	if( temp1 ){
 36a:	88 23       	and	r24, r24
 36c:	11 f0       	breq	.+4      	; 0x372 <IO_Data_LED_Toggle+0x10>
		PORTD &= 0xdf;
 36e:	5d 98       	cbi	0x0b, 5	; 11
		return;		
 370:	08 95       	ret
	}
	PORTD |= 0x20;	
 372:	5d 9a       	sbi	0x0b, 5	; 11
 374:	08 95       	ret

00000376 <SX1272_TX_Switch_On>:
				return;
			}
			// Next task.
			++lora_rx_task_cnt;
			// Clear status flag bit.
			lora_task_flag &= 0xfd;		
 376:	5f 98       	cbi	0x0b, 7	; 11
 378:	28 9a       	sbi	0x05, 0	; 5
 37a:	08 95       	ret

0000037c <SX1272_Reset_Off>:
 37c:	42 98       	cbi	0x08, 2	; 8
 37e:	3a 98       	cbi	0x07, 2	; 7
 380:	08 95       	ret

00000382 <SX1272_Reg_Access_On>:
 382:	89 e4       	ldi	r24, 0x49	; 73
 384:	91 e0       	ldi	r25, 0x01	; 1
 386:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <spi_trn_ptr+0x1>
 38a:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <spi_trn_ptr>
 38e:	80 e8       	ldi	r24, 0x80	; 128
 390:	91 e0       	ldi	r25, 0x01	; 1
 392:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <spi_rec_ptr+0x1>
 396:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <spi_rec_ptr>
 39a:	82 e0       	ldi	r24, 0x02	; 2
 39c:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <spi_data_cnt>
 3a0:	0e 94 3e 03 	call	0x67c	; 0x67c <SPI_Trigger_On>
 3a4:	08 95       	ret

000003a6 <LoRa_Tx_Task_Poll>:
 3a6:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <lora_task_flag>
 3aa:	89 2f       	mov	r24, r25
 3ac:	81 70       	andi	r24, 0x01	; 1
 3ae:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <temp2>
 3b2:	88 23       	and	r24, r24
 3b4:	09 f4       	brne	.+2      	; 0x3b8 <LoRa_Tx_Task_Poll+0x12>
 3b6:	a4 c0       	rjmp	.+328    	; 0x500 <__FUSE_REGION_LENGTH__+0x100>
 3b8:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <spi_status_flag>
 3bc:	81 70       	andi	r24, 0x01	; 1
 3be:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <temp2>
 3c2:	81 11       	cpse	r24, r1
 3c4:	9d c0       	rjmp	.+314    	; 0x500 <__FUSE_REGION_LENGTH__+0x100>
 3c6:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <lora_tx_task_cnt>
 3ca:	82 30       	cpi	r24, 0x02	; 2
 3cc:	09 f4       	brne	.+2      	; 0x3d0 <LoRa_Tx_Task_Poll+0x2a>
 3ce:	4d c0       	rjmp	.+154    	; 0x46a <__FUSE_REGION_LENGTH__+0x6a>
 3d0:	28 f4       	brcc	.+10     	; 0x3dc <LoRa_Tx_Task_Poll+0x36>
 3d2:	88 23       	and	r24, r24
 3d4:	61 f0       	breq	.+24     	; 0x3ee <LoRa_Tx_Task_Poll+0x48>
 3d6:	81 30       	cpi	r24, 0x01	; 1
 3d8:	c9 f0       	breq	.+50     	; 0x40c <__FUSE_REGION_LENGTH__+0xc>
 3da:	08 95       	ret
 3dc:	84 30       	cpi	r24, 0x04	; 4
 3de:	09 f4       	brne	.+2      	; 0x3e2 <LoRa_Tx_Task_Poll+0x3c>
 3e0:	6f c0       	rjmp	.+222    	; 0x4c0 <__FUSE_REGION_LENGTH__+0xc0>
 3e2:	08 f4       	brcc	.+2      	; 0x3e6 <LoRa_Tx_Task_Poll+0x40>
 3e4:	5f c0       	rjmp	.+190    	; 0x4a4 <__FUSE_REGION_LENGTH__+0xa4>
 3e6:	85 30       	cpi	r24, 0x05	; 5
 3e8:	09 f4       	brne	.+2      	; 0x3ec <LoRa_Tx_Task_Poll+0x46>
 3ea:	79 c0       	rjmp	.+242    	; 0x4de <__FUSE_REGION_LENGTH__+0xde>
 3ec:	08 95       	ret
 3ee:	0e 94 b1 01 	call	0x362	; 0x362 <IO_Data_LED_Toggle>
 3f2:	0e 94 bb 01 	call	0x376	; 0x376 <SX1272_TX_Switch_On>
 3f6:	88 e0       	ldi	r24, 0x08	; 8
 3f8:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <lora_para_cnt>
 3fc:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <lora_para_index>
 400:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <lora_tx_task_cnt>
 404:	8f 5f       	subi	r24, 0xFF	; 255
 406:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <lora_tx_task_cnt>
 40a:	08 95       	ret
 40c:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <lora_para_index>
 410:	a9 e4       	ldi	r26, 0x49	; 73
 412:	b1 e0       	ldi	r27, 0x01	; 1
 414:	e8 2f       	mov	r30, r24
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	e0 50       	subi	r30, 0x00	; 0
 41a:	ff 4f       	sbci	r31, 0xFF	; 255
 41c:	90 81       	ld	r25, Z
 41e:	9c 93       	st	X, r25
 420:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <lora_para_cnt>
 424:	e1 e0       	ldi	r30, 0x01	; 1
 426:	e8 0f       	add	r30, r24
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	e0 50       	subi	r30, 0x00	; 0
 42c:	ff 4f       	sbci	r31, 0xFF	; 255
 42e:	20 81       	ld	r18, Z
 430:	11 96       	adiw	r26, 0x01	; 1
 432:	2c 93       	st	X, r18
 434:	8e 5f       	subi	r24, 0xFE	; 254
 436:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <lora_para_index>
 43a:	8e ef       	ldi	r24, 0xFE	; 254
 43c:	89 0f       	add	r24, r25
 43e:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <lora_para_cnt>
 442:	0e 94 c1 01 	call	0x382	; 0x382 <SX1272_Reg_Access_On>
 446:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <lora_para_cnt>
 44a:	81 11       	cpse	r24, r1
 44c:	59 c0       	rjmp	.+178    	; 0x500 <__FUSE_REGION_LENGTH__+0x100>
 44e:	8a e0       	ldi	r24, 0x0A	; 10
 450:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <lora_para_cnt>
 454:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <lora_para_index>
 458:	80 e8       	ldi	r24, 0x80	; 128
 45a:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <spi_trn_data>
 45e:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <lora_tx_task_cnt>
 462:	8f 5f       	subi	r24, 0xFF	; 255
 464:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <lora_tx_task_cnt>
 468:	08 95       	ret
 46a:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <lora_para_index>
 46e:	e8 2f       	mov	r30, r24
 470:	f0 e0       	ldi	r31, 0x00	; 0
 472:	ed 55       	subi	r30, 0x5D	; 93
 474:	fe 4f       	sbci	r31, 0xFE	; 254
 476:	90 81       	ld	r25, Z
 478:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <spi_trn_data+0x1>
 47c:	8f 5f       	subi	r24, 0xFF	; 255
 47e:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <lora_para_index>
 482:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <lora_para_cnt>
 486:	81 50       	subi	r24, 0x01	; 1
 488:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <lora_para_cnt>
 48c:	0e 94 c1 01 	call	0x382	; 0x382 <SX1272_Reg_Access_On>
 490:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <lora_para_cnt>
 494:	81 11       	cpse	r24, r1
 496:	34 c0       	rjmp	.+104    	; 0x500 <__FUSE_REGION_LENGTH__+0x100>
 498:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <lora_tx_task_cnt>
 49c:	8f 5f       	subi	r24, 0xFF	; 255
 49e:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <lora_tx_task_cnt>
 4a2:	08 95       	ret
 4a4:	e9 e4       	ldi	r30, 0x49	; 73
 4a6:	f1 e0       	ldi	r31, 0x01	; 1
 4a8:	81 e8       	ldi	r24, 0x81	; 129
 4aa:	80 83       	st	Z, r24
 4ac:	83 e8       	ldi	r24, 0x83	; 131
 4ae:	81 83       	std	Z+1, r24	; 0x01
 4b0:	0e 94 c1 01 	call	0x382	; 0x382 <SX1272_Reg_Access_On>
 4b4:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <lora_tx_task_cnt>
 4b8:	8f 5f       	subi	r24, 0xFF	; 255
 4ba:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <lora_tx_task_cnt>
 4be:	08 95       	ret
 4c0:	e9 e4       	ldi	r30, 0x49	; 73
 4c2:	f1 e0       	ldi	r31, 0x01	; 1
 4c4:	82 e1       	ldi	r24, 0x12	; 18
 4c6:	80 83       	st	Z, r24
 4c8:	11 82       	std	Z+1, r1	; 0x01
 4ca:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <spi_rec_data+0x1>
 4ce:	0e 94 c1 01 	call	0x382	; 0x382 <SX1272_Reg_Access_On>
 4d2:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <lora_tx_task_cnt>
 4d6:	8f 5f       	subi	r24, 0xFF	; 255
 4d8:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <lora_tx_task_cnt>
 4dc:	08 95       	ret
 4de:	e0 e8       	ldi	r30, 0x80	; 128
 4e0:	f1 e0       	ldi	r31, 0x01	; 1
 4e2:	81 81       	ldd	r24, Z+1	; 0x01
 4e4:	88 70       	andi	r24, 0x08	; 8
 4e6:	81 83       	std	Z+1, r24	; 0x01
 4e8:	81 11       	cpse	r24, r1
 4ea:	04 c0       	rjmp	.+8      	; 0x4f4 <__FUSE_REGION_LENGTH__+0xf4>
 4ec:	84 e0       	ldi	r24, 0x04	; 4
 4ee:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <lora_tx_task_cnt>
 4f2:	08 95       	ret
 4f4:	86 e0       	ldi	r24, 0x06	; 6
 4f6:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <lora_tx_task_cnt>
 4fa:	9e 7f       	andi	r25, 0xFE	; 254
 4fc:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <lora_task_flag>
 500:	08 95       	ret

00000502 <SX1272_SPI_Loop>:

// SPI transmit loop.
void SX1272_SPI_Loop( void )
{
	// Task loop.
	temp2 = 0x01;
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <temp2>
	while( temp2 ){
		SPI_Task();
 508:	0e 94 06 03 	call	0x60c	; 0x60c <SPI_Task>
		temp2 = spi_status_flag;
		temp2 &= 0x01;
 50c:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <spi_status_flag>
 510:	81 70       	andi	r24, 0x01	; 1
 512:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <temp2>
// SPI transmit loop.
void SX1272_SPI_Loop( void )
{
	// Task loop.
	temp2 = 0x01;
	while( temp2 ){
 516:	81 11       	cpse	r24, r1
 518:	f7 cf       	rjmp	.-18     	; 0x508 <SX1272_SPI_Loop+0x6>
		SPI_Task();
		temp2 = spi_status_flag;
		temp2 &= 0x01;
	}	
}
 51a:	08 95       	ret

0000051c <SX1272_Reg_Access>:
}

// Single register access.
void SX1272_Reg_Access( void )
{
	spi_trn_ptr = spi_trn_data;		// Output data pointer.
 51c:	89 e4       	ldi	r24, 0x49	; 73
 51e:	91 e0       	ldi	r25, 0x01	; 1
 520:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <spi_trn_ptr+0x1>
 524:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <spi_trn_ptr>
	spi_rec_ptr = spi_rec_data;     // Received data pointer.
 528:	80 e8       	ldi	r24, 0x80	; 128
 52a:	91 e0       	ldi	r25, 0x01	; 1
 52c:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <spi_rec_ptr+0x1>
 530:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <spi_rec_ptr>
	spi_data_cnt = 2;				// 2 byte data.
 534:	82 e0       	ldi	r24, 0x02	; 2
 536:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <spi_data_cnt>
	SPI_Trigger_On();				// SPI on.
 53a:	0e 94 3e 03 	call	0x67c	; 0x67c <SPI_Trigger_On>
	SX1272_SPI_Loop();				// SPI loop.
 53e:	0e 94 81 02 	call	0x502	; 0x502 <SX1272_SPI_Loop>
 542:	08 95       	ret

00000544 <LoRa_RF_Init>:
	0x81, 0x85  // RX on.
};

// LoRa RF initialize.
void LoRa_RF_Init( void )
{
 544:	cf 93       	push	r28
 546:	df 93       	push	r29
 548:	80 e0       	ldi	r24, 0x00	; 0
	temp3 = 0;
	// Set initialize register write data.
	while( temp3 < 38 ){			
		spi_trn_data[0] = RF_Init_Data[ temp3 ];
 54a:	c9 e4       	ldi	r28, 0x49	; 73
 54c:	d1 e0       	ldi	r29, 0x01	; 1
 54e:	e8 2f       	mov	r30, r24
 550:	f0 e0       	ldi	r31, 0x00	; 0
 552:	e6 5f       	subi	r30, 0xF6	; 246
 554:	fe 4f       	sbci	r31, 0xFE	; 254
 556:	90 81       	ld	r25, Z
 558:	98 83       	st	Y, r25
		++temp3;
 55a:	e1 e0       	ldi	r30, 0x01	; 1
 55c:	e8 0f       	add	r30, r24
		spi_trn_data[1] = RF_Init_Data[ temp3 ];
 55e:	f0 e0       	ldi	r31, 0x00	; 0
 560:	e6 5f       	subi	r30, 0xF6	; 246
 562:	fe 4f       	sbci	r31, 0xFE	; 254
 564:	90 81       	ld	r25, Z
 566:	99 83       	std	Y+1, r25	; 0x01
		++temp3;
 568:	8e 5f       	subi	r24, 0xFE	; 254
 56a:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <temp3>
		SX1272_Reg_Access();					
 56e:	0e 94 8e 02 	call	0x51c	; 0x51c <SX1272_Reg_Access>
// LoRa RF initialize.
void LoRa_RF_Init( void )
{
	temp3 = 0;
	// Set initialize register write data.
	while( temp3 < 38 ){			
 572:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <temp3>
 576:	86 32       	cpi	r24, 0x26	; 38
 578:	50 f3       	brcs	.-44     	; 0x54e <LoRa_RF_Init+0xa>
		++temp3;
		spi_trn_data[1] = RF_Init_Data[ temp3 ];
		++temp3;
		SX1272_Reg_Access();					
	}
}
 57a:	df 91       	pop	r29
 57c:	cf 91       	pop	r28
 57e:	08 95       	ret

00000580 <main>:
};

int main(void)
{
	// System clock prescaler 1.
	CLKPR = 0x80;  // Enable.
 580:	e1 e6       	ldi	r30, 0x61	; 97
 582:	f0 e0       	ldi	r31, 0x00	; 0
 584:	80 e8       	ldi	r24, 0x80	; 128
 586:	80 83       	st	Z, r24
	CLKPR = 0x00;  // Write value.
 588:	10 82       	st	Z, r1
		
	// IO initialize.
	IO_Init();
 58a:	0e 94 a1 01 	call	0x342	; 0x342 <IO_Init>
	// ADC initialize.
	ADC_Init();
 58e:	0e 94 8d 00 	call	0x11a	; 0x11a <ADC_Init>
	// SPI initialize.
	SPI_Init();
 592:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <SPI_Init>
	// TWI initialize.
	TWI1_Init();
 596:	0e 94 74 03 	call	0x6e8	; 0x6e8 <TWI1_Init>
	// Timer #0 initialize.
	Timer0_Init();
 59a:	0e 94 5e 03 	call	0x6bc	; 0x6bc <Timer0_Init>
	// Enable global interrupt.
	sei();
 59e:	78 94       	sei
	
	// Power on / Reset hold delay for SX1272.
	// About 30ms.
	delay_cnt = 3;
 5a0:	83 e0       	ldi	r24, 0x03	; 3
 5a2:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <delay_cnt>
	while( delay_cnt ){
		Timer0_Task();
 5a6:	0e 94 65 03 	call	0x6ca	; 0x6ca <Timer0_Task>
	sei();
	
	// Power on / Reset hold delay for SX1272.
	// About 30ms.
	delay_cnt = 3;
	while( delay_cnt ){
 5aa:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <delay_cnt>
 5ae:	81 11       	cpse	r24, r1
 5b0:	fa cf       	rjmp	.-12     	; 0x5a6 <main+0x26>
		Timer0_Task();
	}
	
	// SX1272 reset off.	
	SX1272_Reset_Off();
 5b2:	0e 94 be 01 	call	0x37c	; 0x37c <SX1272_Reset_Off>

	// Reset delay for SX1272.
	// About 50ms.
	delay_cnt = 5;
 5b6:	85 e0       	ldi	r24, 0x05	; 5
 5b8:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <delay_cnt>
	while( delay_cnt ){
		Timer0_Task();
 5bc:	0e 94 65 03 	call	0x6ca	; 0x6ca <Timer0_Task>
	SX1272_Reset_Off();

	// Reset delay for SX1272.
	// About 50ms.
	delay_cnt = 5;
	while( delay_cnt ){
 5c0:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <delay_cnt>
 5c4:	81 11       	cpse	r24, r1
 5c6:	fa cf       	rjmp	.-12     	; 0x5bc <main+0x3c>
		Timer0_Task();
	}
		
	// SX1272 RF initialize.
	LoRa_RF_Init();
 5c8:	0e 94 a2 02 	call	0x544	; 0x544 <LoRa_RF_Init>
	
	// Data reset.
	// - TX data.
	temp1 = 0;
	if( temp1 < 10 ){
		rf_tx_data[temp1] = 0;
 5cc:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <rf_tx_data>
		++temp1;
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <temp1>
	}
	// - TX task count.
	lora_tx_task_cnt = 0;
 5d6:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <lora_tx_task_cnt>
		
	while (1)
	{
		// Timer #0 task.
		Timer0_Task();
 5da:	0e 94 65 03 	call	0x6ca	; 0x6ca <Timer0_Task>
		// ADC task.
		ADC_Task();
 5de:	0e 94 9d 00 	call	0x13a	; 0x13a <ADC_Task>
		// TWI task.
		TWI1_Task();		
 5e2:	0e 94 90 03 	call	0x720	; 0x720 <TWI1_Task>
		// SPI task.
		SPI_Task();		
 5e6:	0e 94 06 03 	call	0x60c	; 0x60c <SPI_Task>
		// LoRa task.
		LoRa_Tx_Task_Poll();
 5ea:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LoRa_Tx_Task_Poll>
		// Peripheral devices task dispatch.
		Device_Task();
 5ee:	0e 94 b1 00 	call	0x162	; 0x162 <Device_Task>
	}
 5f2:	f3 cf       	rjmp	.-26     	; 0x5da <main+0x5a>

000005f4 <SPI_Init>:
	// SPI #1.
	// - MSB first.
	// - SCK = fosc/128.
	// CPOL = 0, CPHA = 0.
	// - Master mode.
	SPCR1 = 0x13;	
 5f4:	ec ea       	ldi	r30, 0xAC	; 172
 5f6:	f0 e0       	ldi	r31, 0x00	; 0
 5f8:	83 e1       	ldi	r24, 0x13	; 19
 5fa:	80 83       	st	Z, r24
	// SPI #1 enable.
	SPCR1 |= 0x40;
 5fc:	80 81       	ld	r24, Z
 5fe:	80 64       	ori	r24, 0x40	; 64
 600:	80 83       	st	Z, r24
	
	// For clear interrupt flag bit.
	temp1 = SPDR1;
 602:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 606:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <temp1>
 60a:	08 95       	ret

0000060c <SPI_Task>:

// SPI task.
void SPI_Task( void )
{
	// Check interrupt flag bit.
	temp1 = SPSR1;
 60c:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
	temp1 &= 0x80;	
 610:	80 78       	andi	r24, 0x80	; 128
 612:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <temp1>
	if( temp1 == 0 ){
 616:	88 23       	and	r24, r24
 618:	81 f1       	breq	.+96     	; 0x67a <SPI_Task+0x6e>
		return;
	}
	// Hold received data and clear interrupt flag bit.
	*spi_rec_ptr = SPDR1;
 61a:	e0 91 b4 01 	lds	r30, 0x01B4	; 0x8001b4 <spi_rec_ptr>
 61e:	f0 91 b5 01 	lds	r31, 0x01B5	; 0x8001b5 <spi_rec_ptr+0x1>
 622:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
 626:	80 83       	st	Z, r24
	++spi_rec_ptr;
 628:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <spi_rec_ptr>
 62c:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <spi_rec_ptr+0x1>
 630:	01 96       	adiw	r24, 0x01	; 1
 632:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <spi_rec_ptr+0x1>
 636:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <spi_rec_ptr>
	// Check data count.
	if( spi_data_cnt  ){
 63a:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <spi_data_cnt>
 63e:	88 23       	and	r24, r24
 640:	b1 f0       	breq	.+44     	; 0x66e <SPI_Task+0x62>
		
		// Transmit data.
		SPDR1 = *spi_trn_ptr;		
 642:	e0 91 a0 01 	lds	r30, 0x01A0	; 0x8001a0 <spi_trn_ptr>
 646:	f0 91 a1 01 	lds	r31, 0x01A1	; 0x8001a1 <spi_trn_ptr+0x1>
 64a:	80 81       	ld	r24, Z
 64c:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
		// for next data.
		++spi_trn_ptr;
 650:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <spi_trn_ptr>
 654:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <spi_trn_ptr+0x1>
 658:	01 96       	adiw	r24, 0x01	; 1
 65a:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <spi_trn_ptr+0x1>
 65e:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <spi_trn_ptr>
		--spi_data_cnt;
 662:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <spi_data_cnt>
 666:	81 50       	subi	r24, 0x01	; 1
 668:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <spi_data_cnt>
		return;
 66c:	08 95       	ret
	}
	// SS output inactive.
	PORTE |= 0x04;
 66e:	72 9a       	sbi	0x0e, 2	; 14
	// Clear busy bit.
	spi_status_flag &= 0xfe;	
 670:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <spi_status_flag>
 674:	8e 7f       	andi	r24, 0xFE	; 254
 676:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <spi_status_flag>
 67a:	08 95       	ret

0000067c <SPI_Trigger_On>:

// SPI trigger on.
void SPI_Trigger_On( void )
{
	// Set busy flag bit.
	spi_status_flag |= 0x01;
 67c:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <spi_status_flag>
 680:	81 60       	ori	r24, 0x01	; 1
 682:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <spi_status_flag>
	// SS output active.
	PORTE &= 0xfb;
 686:	72 98       	cbi	0x0e, 2	; 14
	// Assign pointer to data array.
	//spi_rec_ptr = spi_rec_data;
	//spi_trn_ptr = spi_trn_data;
	// First byte output.
	// Check data count.
	if( spi_data_cnt  ){		
 688:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <spi_data_cnt>
 68c:	88 23       	and	r24, r24
 68e:	a9 f0       	breq	.+42     	; 0x6ba <SPI_Trigger_On+0x3e>
		// Transmit data.
		SPDR1 = *spi_trn_ptr;
 690:	e0 91 a0 01 	lds	r30, 0x01A0	; 0x8001a0 <spi_trn_ptr>
 694:	f0 91 a1 01 	lds	r31, 0x01A1	; 0x8001a1 <spi_trn_ptr+0x1>
 698:	80 81       	ld	r24, Z
 69a:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
		// for next data.
		++spi_trn_ptr;
 69e:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <spi_trn_ptr>
 6a2:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <spi_trn_ptr+0x1>
 6a6:	01 96       	adiw	r24, 0x01	; 1
 6a8:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <spi_trn_ptr+0x1>
 6ac:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <spi_trn_ptr>
		--spi_data_cnt;
 6b0:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <spi_data_cnt>
 6b4:	81 50       	subi	r24, 0x01	; 1
 6b6:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <spi_data_cnt>
 6ba:	08 95       	ret

000006bc <Timer0_Init>:
{
	// 8MHz oscillator, 0.125us * 1024 = 128us.
	// period, 128us * 256 = 32.768 ms.	
	
	// CTC mode, no output.
	TCCR0A = 0x02;
 6bc:	82 e0       	ldi	r24, 0x02	; 2
 6be:	84 bd       	out	0x24, r24	; 36
	// Prescaler 1024.
	TCCR0B = 0x05; 
 6c0:	85 e0       	ldi	r24, 0x05	; 5
 6c2:	85 bd       	out	0x25, r24	; 37
	// comparator A.
	// - 10ms / 256us = 38.
	OCR0A = 39;
 6c4:	87 e2       	ldi	r24, 0x27	; 39
 6c6:	87 bd       	out	0x27, r24	; 39
 6c8:	08 95       	ret

000006ca <Timer0_Task>:

// Timer #0 task.
void Timer0_Task( void )
{
	// Check interrupt flag bit. 
	temp1 = TIFR0;
 6ca:	85 b3       	in	r24, 0x15	; 21
	temp1 &= 0x02;
 6cc:	82 70       	andi	r24, 0x02	; 2
 6ce:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <temp1>
	if( temp1 == 0 ){
 6d2:	88 23       	and	r24, r24
 6d4:	41 f0       	breq	.+16     	; 0x6e6 <Timer0_Task+0x1c>
		return;
	}
	// About 10ms past.
	// Clear flag bit.
	TIFR0 |= 0x02;	
 6d6:	a9 9a       	sbi	0x15, 1	; 21
	
	// Delay count.
	if( delay_cnt ){
 6d8:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <delay_cnt>
 6dc:	88 23       	and	r24, r24
 6de:	19 f0       	breq	.+6      	; 0x6e6 <Timer0_Task+0x1c>
		--delay_cnt;
 6e0:	81 50       	subi	r24, 0x01	; 1
 6e2:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <delay_cnt>
 6e6:	08 95       	ret

000006e8 <TWI1_Init>:
// TWI #1 initialize.
void TWI1_Init( void )
{
	//TWI ( I2C also ).
	// - 100KHz @ 8MHz.
	TWBR1 = 32;
 6e8:	80 e2       	ldi	r24, 0x20	; 32
 6ea:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 6ee:	08 95       	ret

000006f0 <TWI1_On_Write>:

// TWI #1 write task trigger on.
void TWI1_On_Write( void )
{
	// Reset task counter.
	twi1_task_cnt = 1;
 6f0:	81 e0       	ldi	r24, 0x01	; 1
 6f2:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
	// Set busy flag bit.
	twi1_task_status |= 0x01;
 6f6:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <twi1_task_status>
 6fa:	81 60       	ori	r24, 0x01	; 1
 6fc:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <twi1_task_status>
	// Send start condition.
	TWCR1 = 0xa4;	
 700:	84 ea       	ldi	r24, 0xA4	; 164
 702:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
 706:	08 95       	ret

00000708 <TWI1_On_Read>:

// TWI #1 read task trigger on.
void TWI1_On_Read( void )
{
	// Reset task counter.
	twi1_task_cnt = 6;
 708:	86 e0       	ldi	r24, 0x06	; 6
 70a:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
	// Set busy flag bit.
	twi1_task_status |= 0x01;	
 70e:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <twi1_task_status>
 712:	81 60       	ori	r24, 0x01	; 1
 714:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <twi1_task_status>
	// Send start condition.
	TWCR1 = 0xa4;	
 718:	84 ea       	ldi	r24, 0xA4	; 164
 71a:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
 71e:	08 95       	ret

00000720 <TWI1_Task>:

// TWI #1 task.
void TWI1_Task( void )
{
	// Check interrupt flag.
	temp1 = TWCR1;
 720:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
	temp1 &= 0x80;
 724:	80 78       	andi	r24, 0x80	; 128
 726:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <temp1>
	if( temp1 == 0x00 ){
 72a:	88 23       	and	r24, r24
 72c:	09 f4       	brne	.+2      	; 0x730 <TWI1_Task+0x10>
 72e:	c9 c0       	rjmp	.+402    	; 0x8c2 <TWI1_Task+0x1a2>
	}
	// Clear flag bit.
	//TWCR |= 0x80;
	
	// Get status code.
	temp1 = TWSR1;
 730:	20 91 d9 00 	lds	r18, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	temp1 &= 0xf8;
 734:	28 7f       	andi	r18, 0xF8	; 248
 736:	20 93 73 01 	sts	0x0173, r18	; 0x800173 <temp1>
	
	switch( twi1_task_cnt ){
 73a:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <__data_end>
 73e:	8e 2f       	mov	r24, r30
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	fc 01       	movw	r30, r24
 744:	31 97       	sbiw	r30, 0x01	; 1
 746:	e4 31       	cpi	r30, 0x14	; 20
 748:	f1 05       	cpc	r31, r1
 74a:	08 f0       	brcs	.+2      	; 0x74e <TWI1_Task+0x2e>
 74c:	ba c0       	rjmp	.+372    	; 0x8c2 <TWI1_Task+0x1a2>
 74e:	e6 5a       	subi	r30, 0xA6	; 166
 750:	ff 4f       	sbci	r31, 0xFF	; 255
 752:	0c 94 84 04 	jmp	0x908	; 0x908 <__tablejump2__>
		
		// SLA + W was send.
		case 12:
		// Send control word.
		TWDR1 = twi1_word;
 756:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <twi1_word>
 75a:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
		// 1.) Clear interrupt flag,
		// 2.) and trigger on.
		TWCR1 = 0x84;
 75e:	84 e8       	ldi	r24, 0x84	; 132
 760:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
		// Next task.
		++twi1_task_cnt;
 764:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
 768:	8f 5f       	subi	r24, 0xFF	; 255
 76a:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
		break;
 76e:	08 95       	ret
		case 13:
		// Restart condition.
		// 1.) Clear interrupt flag,
		// 2.) Start condition.
		// 3.) and trigger on.
		TWCR1 = 0xa4;
 770:	84 ea       	ldi	r24, 0xA4	; 164
 772:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
		// Next task.
		++twi1_task_cnt;
 776:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
 77a:	8f 5f       	subi	r24, 0xFF	; 255
 77c:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
		break;
 780:	08 95       	ret
		// SLA+R was send.
		case 15:
		case 7:
		// Check ACK or NACK.
		// NACK
		if( temp1 == 0x48){
 782:	28 34       	cpi	r18, 0x48	; 72
 784:	59 f4       	brne	.+22     	; 0x79c <TWI1_Task+0x7c>
			// Stop condition out.
			// 1.) Clear interrupt flag,
			// 2.) stop condition,
			// 3.) trigger on TWI.
			TWCR1 = 0x94;
 786:	84 e9       	ldi	r24, 0x94	; 148
 788:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
			// Clear flag bit.
			twi1_task_status &= 0xfe;
 78c:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <twi1_task_status>
 790:	8e 7f       	andi	r24, 0xFE	; 254
 792:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <twi1_task_status>
			// NACK check.
			twi1_task_cnt = 0;
 796:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <__data_end>
			return;
 79a:	08 95       	ret
		}
		// 1.) Clear interrupt flag.
		// 2.) Prepare received data and return ACK.
		// 3.) Trigger on.
		TWCR1 = 0xC4;
 79c:	84 ec       	ldi	r24, 0xC4	; 196
 79e:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
		// Next task.
		++twi1_task_cnt;
 7a2:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
 7a6:	8f 5f       	subi	r24, 0xFF	; 255
 7a8:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
		break;
 7ac:	08 95       	ret
		case 16:
		case 8:
		// check status data received and ACK return.
		
		// Hold shifter data.
		twi1_data[twi1_data_index] = TWDR1;
 7ae:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <twi1_data_index>
 7b2:	90 91 db 00 	lds	r25, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
 7b6:	e8 2f       	mov	r30, r24
 7b8:	f0 e0       	ldi	r31, 0x00	; 0
 7ba:	ec 58       	subi	r30, 0x8C	; 140
 7bc:	fe 4f       	sbci	r31, 0xFE	; 254
 7be:	90 83       	st	Z, r25
		// Next byte data.
		++twi1_data_index;
 7c0:	8f 5f       	subi	r24, 0xFF	; 255
 7c2:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <twi1_data_index>
		--twi1_data_cnt;
 7c6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <twi1_data_cnt>
 7ca:	81 50       	subi	r24, 0x01	; 1
 7cc:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <twi1_data_cnt>
		
		// Check data counter.
		if( twi1_data_cnt == 1 ){
 7d0:	81 30       	cpi	r24, 0x01	; 1
 7d2:	49 f4       	brne	.+18     	; 0x7e6 <TWI1_Task+0xc6>
			// Prepare receive first byte data.
			
			// 1.) Clear interrupt flag.
			// 2.) Received data and return NACK.
			// 3.) Trigger on.
			TWCR1 = 0x84;
 7d4:	84 e8       	ldi	r24, 0x84	; 132
 7d6:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
			// Next task.
			++twi1_task_cnt;
 7da:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
 7de:	8f 5f       	subi	r24, 0xFF	; 255
 7e0:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
 7e4:	08 95       	ret
		}
		else{
			// 1.) Clear interrupt flag.
			// 2.) Received data and return ACK.
			// 3.) Trigger on.
			TWCR1 = 0xC4;
 7e6:	84 ec       	ldi	r24, 0xC4	; 196
 7e8:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
 7ec:	08 95       	ret

		// All data received.
		case 17:
		case 9:
		// Hold shifter data.
		twi1_data[twi1_data_index] = TWDR1;
 7ee:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
 7f2:	e0 91 b1 01 	lds	r30, 0x01B1	; 0x8001b1 <twi1_data_index>
 7f6:	f0 e0       	ldi	r31, 0x00	; 0
 7f8:	ec 58       	subi	r30, 0x8C	; 140
 7fa:	fe 4f       	sbci	r31, 0xFE	; 254
 7fc:	80 83       	st	Z, r24
		case 3:
		// Stop condition out.
		// 1.) Clear interrupt flag,
		// 2.) stop condition,
		// 3.) trigger on TWI.
		TWCR1 = 0x94;
 7fe:	84 e9       	ldi	r24, 0x94	; 148
 800:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
		// Clear flag bit.
		twi1_task_status &= 0xfe;
 804:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <twi1_task_status>
 808:	8e 7f       	andi	r24, 0xFE	; 254
 80a:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <twi1_task_status>
		// Next task.
		++twi1_task_cnt;
 80e:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
 812:	8f 5f       	subi	r24, 0xFF	; 255
 814:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
		break;
 818:	08 95       	ret
		// SLA+W was send or
		// Data was send.
		case 2:
		// ACK or NACK check.
		// Only ACK.
		if( temp1 == 0x18 || temp1 == 0x28 ){
 81a:	28 31       	cpi	r18, 0x18	; 24
 81c:	11 f0       	breq	.+4      	; 0x822 <TWI1_Task+0x102>
 81e:	28 32       	cpi	r18, 0x28	; 40
 820:	e9 f4       	brne	.+58     	; 0x85c <TWI1_Task+0x13c>
			// Send data.
			TWDR1 = twi1_data[twi1_data_index];
 822:	e0 91 b1 01 	lds	r30, 0x01B1	; 0x8001b1 <twi1_data_index>
 826:	f0 e0       	ldi	r31, 0x00	; 0
 828:	ec 58       	subi	r30, 0x8C	; 140
 82a:	fe 4f       	sbci	r31, 0xFE	; 254
 82c:	80 81       	ld	r24, Z
 82e:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
			// 1.) Clear interrupt flag,
			// 2.) and trigger on.
			TWCR1 = 0x84;
 832:	84 e8       	ldi	r24, 0x84	; 132
 834:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
			// Next data.
			--twi1_data_cnt;
 838:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <twi1_data_cnt>
 83c:	81 50       	subi	r24, 0x01	; 1
 83e:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <twi1_data_cnt>
			++twi1_data_index;
 842:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <twi1_data_index>
 846:	9f 5f       	subi	r25, 0xFF	; 255
 848:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <twi1_data_index>
			if( twi1_data_cnt != 0 ){
 84c:	81 11       	cpse	r24, r1
 84e:	39 c0       	rjmp	.+114    	; 0x8c2 <TWI1_Task+0x1a2>
				return;
			}
			// Next task.
			++twi1_task_cnt;
 850:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
 854:	8f 5f       	subi	r24, 0xFF	; 255
 856:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
			return;
 85a:	08 95       	ret
		}
		else if( temp1 == 0x20 ){
 85c:	20 32       	cpi	r18, 0x20	; 32
 85e:	41 f4       	brne	.+16     	; 0x870 <TWI1_Task+0x150>
			// Stop condition out.
			// 1.) Clear interrupt flag,
			// 2.) stop condition,
			// 3.) trigger on TWI.
			TWCR1 = 0x94;
 860:	84 e9       	ldi	r24, 0x94	; 148
 862:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
			// Clear flag bit.
			twi1_task_status &= 0xfe;
 866:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <twi1_task_status>
 86a:	8e 7f       	andi	r24, 0xFE	; 254
 86c:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <twi1_task_status>
		}
		// Error check.
		twi1_task_cnt = 0;
 870:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <__data_end>
		break;
 874:	08 95       	ret
		case 20: // <--- for HIH6130 start measurement.
			// Stop condition out.
			// 1.) Clear interrupt flag,
			// 2.) stop condition,
			// 3.) trigger on TWI.
			TWCR1 = 0x94;
 876:	84 e9       	ldi	r24, 0x94	; 148
 878:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
			// Clear flag bit.
			twi1_task_status &= 0xfe;
 87c:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <twi1_task_status>
 880:	8e 7f       	andi	r24, 0xFE	; 254
 882:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <twi1_task_status>
			// Next task.
			++twi1_task_cnt;			
 886:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
 88a:	8f 5f       	subi	r24, 0xFF	; 255
 88c:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
			break;
 890:	08 95       	ret
		
		// Start condition was send.
		case 14:
		twi1_addr |= 0x01;
 892:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <twi1_addr>
 896:	81 60       	ori	r24, 0x01	; 1
 898:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <twi1_addr>
		case 19:	// <--- for HIH6130 only write SLA + W to start measure.
		case 11:
		case 6:
		case 1:
		// Error check.
		if( temp1 != 0x08 ){
 89c:	28 30       	cpi	r18, 0x08	; 8
 89e:	19 f0       	breq	.+6      	; 0x8a6 <TWI1_Task+0x186>
			twi1_task_cnt = 0;
 8a0:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <__data_end>
			return;
 8a4:	08 95       	ret
		}
		// Send SLA + W or SLA + R.
		TWDR1 = twi1_addr;
 8a6:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <twi1_addr>
 8aa:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
		// 1.) Clear interrupt flag,
		// 2.) and trigger on.
		TWCR1 = 0x84;
 8ae:	84 e8       	ldi	r24, 0x84	; 132
 8b0:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
		// Clear data index.
		twi1_data_index = 0;
 8b4:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <twi1_data_index>
		// Next task.
		++twi1_task_cnt;
 8b8:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
 8bc:	8f 5f       	subi	r24, 0xFF	; 255
 8be:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
 8c2:	08 95       	ret

000008c4 <__udivmodsi4>:
 8c4:	a1 e2       	ldi	r26, 0x21	; 33
 8c6:	1a 2e       	mov	r1, r26
 8c8:	aa 1b       	sub	r26, r26
 8ca:	bb 1b       	sub	r27, r27
 8cc:	fd 01       	movw	r30, r26
 8ce:	0d c0       	rjmp	.+26     	; 0x8ea <__udivmodsi4_ep>

000008d0 <__udivmodsi4_loop>:
 8d0:	aa 1f       	adc	r26, r26
 8d2:	bb 1f       	adc	r27, r27
 8d4:	ee 1f       	adc	r30, r30
 8d6:	ff 1f       	adc	r31, r31
 8d8:	a2 17       	cp	r26, r18
 8da:	b3 07       	cpc	r27, r19
 8dc:	e4 07       	cpc	r30, r20
 8de:	f5 07       	cpc	r31, r21
 8e0:	20 f0       	brcs	.+8      	; 0x8ea <__udivmodsi4_ep>
 8e2:	a2 1b       	sub	r26, r18
 8e4:	b3 0b       	sbc	r27, r19
 8e6:	e4 0b       	sbc	r30, r20
 8e8:	f5 0b       	sbc	r31, r21

000008ea <__udivmodsi4_ep>:
 8ea:	66 1f       	adc	r22, r22
 8ec:	77 1f       	adc	r23, r23
 8ee:	88 1f       	adc	r24, r24
 8f0:	99 1f       	adc	r25, r25
 8f2:	1a 94       	dec	r1
 8f4:	69 f7       	brne	.-38     	; 0x8d0 <__udivmodsi4_loop>
 8f6:	60 95       	com	r22
 8f8:	70 95       	com	r23
 8fa:	80 95       	com	r24
 8fc:	90 95       	com	r25
 8fe:	9b 01       	movw	r18, r22
 900:	ac 01       	movw	r20, r24
 902:	bd 01       	movw	r22, r26
 904:	cf 01       	movw	r24, r30
 906:	08 95       	ret

00000908 <__tablejump2__>:
 908:	ee 0f       	add	r30, r30
 90a:	ff 1f       	adc	r31, r31
 90c:	05 90       	lpm	r0, Z+
 90e:	f4 91       	lpm	r31, Z
 910:	e0 2d       	mov	r30, r0
 912:	09 94       	ijmp

00000914 <__muluhisi3>:
 914:	0e 94 95 04 	call	0x92a	; 0x92a <__umulhisi3>
 918:	a5 9f       	mul	r26, r21
 91a:	90 0d       	add	r25, r0
 91c:	b4 9f       	mul	r27, r20
 91e:	90 0d       	add	r25, r0
 920:	a4 9f       	mul	r26, r20
 922:	80 0d       	add	r24, r0
 924:	91 1d       	adc	r25, r1
 926:	11 24       	eor	r1, r1
 928:	08 95       	ret

0000092a <__umulhisi3>:
 92a:	a2 9f       	mul	r26, r18
 92c:	b0 01       	movw	r22, r0
 92e:	b3 9f       	mul	r27, r19
 930:	c0 01       	movw	r24, r0
 932:	a3 9f       	mul	r26, r19
 934:	70 0d       	add	r23, r0
 936:	81 1d       	adc	r24, r1
 938:	11 24       	eor	r1, r1
 93a:	91 1d       	adc	r25, r1
 93c:	b2 9f       	mul	r27, r18
 93e:	70 0d       	add	r23, r0
 940:	81 1d       	adc	r24, r1
 942:	11 24       	eor	r1, r1
 944:	91 1d       	adc	r25, r1
 946:	08 95       	ret

00000948 <_exit>:
 948:	f8 94       	cli

0000094a <__stop_program>:
 94a:	ff cf       	rjmp	.-2      	; 0x94a <__stop_program>
